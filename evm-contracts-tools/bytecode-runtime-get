#!/usr/bin/env node

// SPDX-License-Identifier: AGPL-3.0-or-later

//    ----------------------------------------------------------------------
//    Copyright Â© 2024, 2025  Pellegrino Prevete
//
//    All rights reserved
//    ----------------------------------------------------------------------
//
//    This program is free software: you can redistribute it and/or modify
//    it under the terms of the GNU Affero General Public License as published by
//    the Free Software Foundation, either version 3 of the License, or
//    (at your option) any later version.
//
//    This program is distributed in the hope that it will be useful,
//    but WITHOUT ANY WARRANTY; without even the implied warranty of
//    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//    GNU Affero General Public License for more details.
//
//    You should have received a copy of the GNU Affero General Public License
//    along with this program.  If not, see <https://www.gnu.org/licenses/>.

const
  _libcrash =
    require(
      '../libcrash-js/crash-js');
_cmdline_check =
  _libcrash._cmdline_check;
_error_display =
  _libcrash._error_display;
_msg_info =
  _libcrash._msg_info
_msg_error =
  _libcrash._msg_error
_printf =
  _libcrash._printf
const
  _contract_get_module =
    require(
      './contract-get');
_contract_get =
  _contract_get_module._contract_get
const
  _network_provider_module =
    require(
      '../evm-wallet/network-provider');
_provider_get =
  _network_provider_module._provider_get;

function
  _global_variables() {
  app_name =
    "bytecode-runtime-get";
  wallet_seed =
    "";
  retries_max =
    "";
  api_key_path =
    "";
  target_network =
    "";
  contract_address =
    "";
  contract_abi_path =
    "";
  contract_bytecode_path =
    "";
  // contract_compiler_output_path =
  //   "";
  // contract_method =
  //   "";
  // method_args =
  //   [];
  quiet =
    '';
}

function
  _delay(
    _time) {
  return new Promise(resolve => setTimeout(resolve, _time));
}

function
  _msg_info_contract_obtained(
    _contract) {
  let
    _msg,
    _template;
  _template =
    "Contract '{_contract}' obtained.";
  _msg =
    _template.replaceAll(
      "{_contract}",
      _contract);
  _msg_info(
    _msg);
}

function
  _msg_info_method_obtained(
    _method) {
  let
    _msg;
  _msg =
    "Method obtained.";
  _msg_info(
    _msg);
}

async function
  _bytecode_runtime_get(
    _wallet_seed,
    _retries_max,
    _api_key_path,
    _target_network,
    _contract_address,
    _contract_bytecode_path,
    ) {
  let
    _code,
    _network_provider,
    _passed,
    _wallet_password;
  _retry =
    1;
  _wallet_password =
    "";
  // _contract_get_opts = [
  //   _wallet_seed,
  //   _wallet_password,
  //   _contract_address,
  //   _contract_abi_path,
  //   _contract_bytecode_path,
  //   _contract_compiler_output_path,
  //   _target_network,
  //   _api_key_path,
  // ];
  _passed = 
    false;
  while ( _retry <= _retries_max &&
          _passed == false ) {
    try {
      _network_provider =
        await _provider_get(
          _target_network,
          _api_key);
      _code =
        await _network_provider.getCode(
          _contract_address);
      if ( _code != undefined ) {
        _passed =
          true;
      }
      else if ( _code == undefined ) {
        throw {"error": {
                 "message":
                   "Code not retrieved." } };
      }
    } catch (
        _error) {
      _error_display(
        _error);
      _retry =
        _retry + 1;
      _msg_error(
        "Increasing retry and waiting 3 seconds.",
        0);
      await _delay(
        3000);
    }
  }
  if ( _retry > _retries_max ) {
    throw "Maximum number of retries reached.";
  }
  return _code;
}

function
  _config_show() {
  let
    _line,
    _method_args,
    _text;
  _text =
    [];
  _text.push(
    "  bytecode-runtime-get configuration:");
  _text.push(
    "        Contract address: {contract_address}".replace(
      "{contract_address}",
      contract_address));
  _text.push(
    "       Contract bytecode: {contract_bytecode_path}".replace(
      "{contract_bytecode_path}",
      contract_bytecode_path));
  _text.push(
    "             Max retries: {retries_max}".replace(
      "{retries_max}",
      retries_max));
  _text.push(
    "   Credentials options:");
  _text.push(
    "             Wallet seed: {wallet_seed}".replace(
      "{wallet_seed}",
      wallet_seed));
  _text.push(
    "            API Key path: {api_key_path}".replace(
      "{api_key_path}",
      api_key_path));
  _text.push(
    "       Network options:");
  _text.push(
    "          Target network: {target_network}".replace(
      "{target_network}",
      target_network));
  for (_line of _text)  { 
    _msg_info(
      _line);
  }
}

function
  _usage(
    _exit) {
  let
    _line,
    _text;
  _text = [
    "Retrieves the runtime bytecode for an address.",
    "",
    "Usage:",
    "  bytecode-runtime-get",
    "    <quiet>",
    "    <wallet_seed>",
    "    <retries_max>",
    "    <api_key_path>",
    "    <target_network>",
    "    <contract_address>",
    "    <contract_bytecode_path>",
    "",
    "Args:",
    "  <quiet>                          Can be 'y' or 'n'",
    "                                   Default: y",
    "  <wallet_seed>                    Path of the file containing",
    "                                   the seed phrase.",
    "  <retries_max>                    Maximum number of retries before",
    "                                   failing.",
    "  <api_key_path>                   Path of the API key for the",
    "                                   contract ABI provider service",
    "  <target_network>                 Network on which the contract",
    "                                   resides.",
    "  <contract_address>               Address of the contract",
    "  <contract_bytecode_path>         Path in which to save",
    "                                   the runtime bytecode.",
    "",
    "  Options:",
    "    -h                             This help."
  ];
  for (_line of _text) {
    _msg_info(
      _line);
  }
  process.exit(
    _exit);
}

function
  _overrides_set() {
  if ( retries_max == "" ) {
    retries_max =
      100;
  }
}

function
  _cmdline_parse() {
  quiet =
    "y";
  process.argv.forEach(
    function (
      _value,
      _index,
      _array) {
      if ( _index == 2 ) {
        quiet =
          _value;
      }
      if ( _index == 3 ) {
        wallet_seed =
          _value;
      }
      if ( _index == 4 ) {
        retries_max =
          _value;
      }
      if ( _index == 5 ) {
        api_key_path =
          _value;
      }
      if ( _index == 6 ) {
        target_network =
          _value;
      }
      if ( _index == 7 ) {
        contract_address =
          _value;
      }
      if ( _index == 8 ) {
        contract_bytecode_path =
          _value;
      }
      if ( _value == "-h" ||
           _value == "--help" ) {
        _usage(
          0);
      }
    }
  );
  if ( contract_address == "" ) {
    _msg_error(
      "It is required to set a contract address.",
      0);
    quiet =
      "n";
    _usage(
      1);
  }
  if ( target_network == "" ) {
    _msg_error(
      "It is required to set a network.",
      0);
    quiet =
      "n";
    _usage(
      1);
  }
  if ( contract_bytecode_path == "" ) {
    _msg_error(
      "It is required to set a path in which to save the bytecode.",
      0);
    quiet =
      "n";
    _usage(
      1);
  }
}

async function
  _bytecode_runtime_get_cmdline(
    _app_opts) {
    let
      _code;
  try {
    _code = 
      await _bytecode_runtime_get.apply(
        null,
        _app_opts);
    if ( _code != undefined ) {
      _printf(
        _code.toString());
    }
    else {
      throw "Bytecode runtime retrieval failed."
    }
  } catch (_error) {
    _msg_error(
      _error,
      1);
  }
}

if ( _cmdline_check(
       "bytecode-runtime-get") ) {
  _global_variables();
  _cmdline_parse();
  _overrides_set();
  _config_show();
  app_opts = [
    wallet_seed,
    retries_max,
    api_key_path,
    target_network,
    contract_address,
    contract_bytecode_path,
  ];
  _bytecode_runtime_get_cmdline(
    app_opts);
}

module.exports = {
  _bytecode_runtime_get:
    _bytecode_runtime_get
};

