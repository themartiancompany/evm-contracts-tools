#!/usr/bin/env node

//
// SPDX-License-Identifier: AGPL-3.0-or-later
//

_json_parse =
  JSON.parse;
const
  { ethers } =
    require(
      "ethers");
_ethers =
  ethers;
_contract_factory =
  _ethers.ContractFactory;
_base_contract =
  _ethers.BaseContract;
const
  _fs_utils =
    require(
      '../libcrash-js/fs-utils');
_dirname =
  _fs_utils._dirname;
_file_read =
  _fs_utils._file_read;
_path_join =
  _fs_utils._path_join;
const
  _libcrash =
    require(
      '../libcrash-js/crash-js');
_msg_info =
  _libcrash._msg_info;
_msg_error =
  _libcrash._msg_error;
const
  _evm_wallet_get =
    require(
      '../evm-wallet/wallet-get');
_wallet_get =
  _evm_wallet_get._wallet_get;
const
  _network_provider =
    require(
      '../evm-wallet/network-provider');
_provider_get =
    _network_provider._provider_get;

function
  _global_variables() {
  app_name =
    "contract-get"
  wallet_seed =
    "";
  contract_abi_path =
    "";
  contract_bytecode_path =
    "";
  target_network =
    "";
  api_key_path =
    "";
  quiet =
    "";
}

function
  _msg_info_wallet_selected(
    _wallet) {
  let
    _msg,
    _template;
  _template =
    "wallet is '{_wallet}'";
  _msg =
    _template.replaceAll(
      "{_wallet}",
      _wallet);
  _msg_info(
    _msg);
}

function
  _msg_info_provider_generated(
    _provider) {
  let
    _msg,
    _template;
  _template =
    "provider '{_provider}' generated";
  _msg =
    _template.replaceAll(
      "{_provider}",
      _provider);
  _msg_info(
    _msg);
}

async function
  _contract_get_abi(
    _contract_address,
    _contract_abi_path,
    _network_provider) {
  let
    _contract,
    _contract_abi_str,
    _contract_abi;
  _contract_abi_str =
    _file_read(
      _contract_abi_path);
  _contract_abi =
    _json_parse(
      _contract_abi_str);
  _contract = new
    _base_contract(
      _contract_address,
      _contract_abi,
      runner =
        _network_provider);
  return _contract;
}

async function
  contract_get_bytecode(
    _wallet_seed,
    _wallet_password,
    _provider,
    _contract_bytecode_path) {
  let
    _contract,
    _contract_bytecode,
    _factor,
    _wallet,
    _wallet_get_opts,
    _wallet_path_list,
    _wallet_path;
  _wallet_path_list = [
    _dirname(
      _wallet_seed),
    "wallet.dat"
  ];
  _wallet_path =
    _path_join(
      _wallet_path_list);
  _wallet_get_opts = [
    _wallet_path,
    _wallet_password,
    _wallet_seed,
    _provider
  ];
  _wallet =
    _wallet_get.apply(
      null,
      _wallet_get_opts);
  _msg_info_wallet_selected(
    _wallet);
  _contract_bytecode =
    _file_read(
      _contract_bytecode_path);
  _factory =
    _contract_factory.fromSolidity(
      _contract_bytecode);
  _factory =
    _factory.connect(
      _wallet);
  _contract = await
    _factory.getDeployTransaction();
  return _contract;
}

async function
  _contract_get(
    _wallet_seed,
    _wallet_password,
    _contract_address,
    _contract_abi_path,
    _contract_bytecode_path,
    _target_network,
    _api_key_path) {
  let
    _api_key,
    _contract,
    _provider; 
  if ( _api_key_path != "" ) {
    _api_key =
      _file_read(
        _api_key_path);
  }
  _provider =
    _provider_get(
      _target_network,
      _api_key);
  _msg_info_provider_generated(
    _provider);
  if ( _contract_abi_path != "" ) {
    _contract =
      _contract_get_abi(
        _contract_address,
        _contract_abi_path,
        _provider);
  }
  else if ( _contract_bytecode_path != "" ) {
    _contract =
      _contract_get_bytecode(
        _wallet_seed,
        _wallet_password,
        _provider,
        _contract_bytecode_path);
  }
  return _contract;
}

function
  _config_show() {
  let
    _line,
    _text;
  _text = [];
  _text.push(
    "      Wallet seed: {wallet_seed}".replace(
      "{wallet_seed}",
      wallet_seed));
  _text.push(
    "Contract ABI path: {contract_abi_path}".replace(
      "{contract_abi_path}",
      contract_abi_path));
  _text.push(
    "   Target network: {target_network}".replace(
      "{target_network}",
      target_network));
  _text.push(
    "          API Key: {api_key_path}".replace(
      "{api_key_path}",
      api_key_path));
  _text.push(
    "Contract bytecode: {contract_bytecode_path}".replace(
      "{contract_bytecode_path}",
      contract_bytecode_path));
  for ( _line in _text ) {
    _msg_info(
      _line);
  }
}

function
  _usage() {
  let
    _line,
    _text;
  _text = [
    "Usage:",
    "  contract-get",
    "    <quiet>",
    "    <seed_path>",
    "    <contract_abi_path>",
    "    <contract_bytecode_path>",
    "    (<target_network>)",
    "    (<api_key_path>)"
    "",
    "Args:",
    "  <quiet>                   Can be 'y' or 'n'",
    "                            Default: y",
    "  <seed_path>               Path of the seed phrase",
    "  <api_key_path>            Path of the API key for the",
    "                            contract ABI provider service",
    "  <contract_abi_path>       Path of the contract ABI",
    "  <target_network>          Network on which the contract",
    "                            resides.",
    "  <contract_bytecode_path>  Path for the contract bytecode",
    "  <contract_address>        Address of the contract",
    "  <contract_method>         Contract method to execute",
    "  [method_args]             Arguments to pass to the method",

  ];
  for ( _line in _text ) {
    _msg_info(
      _line);
  }
  process.exit();
}

function _cmdline_parse() {
  quiet = "y";
  process.argv.forEach(
    function (
      _value,
      _index,
      _array) {
      if ( _index == 2 ) {
        quiet =
          _value;
      }
      if ( _index == 3 ) {
        wallet_seed =
          _value;
      }
      if ( _index == 4 ) {
        contract_abi_path =
          _value;
      }
      if ( _index == 5 ) {
        contract_bytecode_path =
          _value;
      }
      if ( _index == 6 ) {
        target_network =
          _value;
      }
      if ( _index ==  7 ) {
        api_key_path =
          _value;
      }
    }
  );
  if ( contract_abi_path == "" &&
       contract_bytecode_path ) {
    _usage();
  }
}

_global_variables();

if ( require.main == module ) {
  _cmdline_parse();
  _config_show();
  app_opts = [
    wallet_seed,
    contract_abi_path,
    contract_bytecode_path,
    target_network,
    api_key_path,
  ];
  _contract_get.apply(
    null,
    app_opts);
}

module.exports = {
  _contract_get:
    _contract_get
};
