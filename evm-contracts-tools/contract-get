#!/usr/bin/env node

//
// SPDX-License-Identifier: AGPL-3.0-or-later
//

_json_parse =
  JSON.parse;
const
  { ethers } =
    require(
      "ethers");
_ethers =
  ethers;
_contract_factory =
  _ethers.ContractFactory;
_base_contract =
  _ethers.BaseContract;
const
  _libcrash =
    require(
      '../libcrash-js/crash-js');
_dirname =
  _libcrash._dirname;
_file_read =
  _libcrash._file_read;
_path_join =
  _libcrash._path_join;
_msg_info =
  _libcrash._msg_info;
_msg_error =
  _libcrash._msg_error;
const
  _evm_wallet_get =
    require(
      '../evm-wallet/wallet-get');
_wallet_get =
  _evm_wallet_get._wallet_get;
const
  _network_provider =
    require(
      '../evm-wallet/network-provider');
_provider_get =
  _network_provider._provider_get;


function
  _global_variables() {
  app_name =
    "contract-get"
  wallet_seed =
    "";
  wallet_password_path =
    "";
  contract_address =
    "";
  contract_abi_path =
    "";
  contract_bytecode_path =
    "";
  target_network =
    "";
  api_key_path =
    "";
  quiet =
    "";
}

function
  _msg_info_wallet_selected(
    _wallet) {
  let
    _msg,
    _template;
  _template =
    "wallet is '{_wallet}'";
  _msg =
    _template.replaceAll(
      "{_wallet}",
      _wallet);
  _msg_info(
    _msg);
}

async function
  _contract_get_abi(
    _wallet,
    _contract_address,
    _contract_abi_path) {
  let
    _contract,
    _contract_abi_str,
    _contract_abi;
  _contract_abi_str =
    _file_read(
      _contract_abi_path);
  _contract_abi =
    _json_parse(
      _contract_abi_str);
  _contract = new
    _base_contract(
      _contract_address,
      _contract_abi,
      runner =
        _wallet);
  return _contract;
}

async function
  _contract_get_bytecode(
    _wallet,
    _contract_address,
    _contract_bytecode_path) {
  let
    _contract,
    _contract_bytecode,
    _factory;
  _contract_bytecode =
    _file_read(
      _contract_bytecode_path);
  _factory =
    _contract_factory.fromSolidity(
      _contract_bytecode);
  _factory =
    _factory.connect(
      _wallet);
  if ( _contract_address != "" ) {
    _factory =
      _factory.attach(
        _contract_address);
  }
  _contract = await
    _factory.getDeployTransaction();
  return _contract;
}

async function
  _contract_get(
    _wallet_seed,
    _wallet_password_path,
    _contract_address,
    _contract_abi_path,
    _contract_bytecode_path,
    _target_network,
    _api_key_path) {
  let
    _api_key,
    _contract,
    _contract_get_opts,
    _network_provider,
    _wallet,
    _wallet_get_opts,
    _wallet_path_list,
    _wallet_path;
  if ( _api_key_path != "" ) {
    _api_key =
      _file_read(
        _api_key_path);
  }
  _network_provider =
    _provider_get(
      _target_network,
      _api_key);
  _contract_get_opts =
    [];
  if ( _wallet_seed != "" ) {
    _wallet_path_list = [
      _dirname(
        _wallet_seed),
      "wallet.dat"
    ];
    _wallet_path =
      _path_join(
        _wallet_path_list);
    _wallet_get_opts = [
      _wallet_path,
      _wallet_password_path,
      _wallet_seed,
      _network_provider
    ];
    _wallet =
      _wallet_get.apply(
        null,
        _wallet_get_opts);
    _msg_info_wallet_selected(
      _wallet);
    _contract_get_opts.push(
      _wallet);
  }
  else {
    _contract_get_opts.push(
      _network_provider);
  }
  _contract_get_opts.push(
    _contract_address);
  if ( _contract_abi_path != "" ) {
    _contract_get_opts.push(
      _contract_abi_path);
    _contract_get_fun =
      _contract_get_abi;
  }
  else if ( _contract_bytecode_path != "" ) {
    _contract_get_opts.push(
      _contract_bytecode_path);
    _contract_get_fun =
      _contract_get_bytecode;
  }
  _contract = await
    _contract_get_fun.apply(
      null,
      _contract_get_opts);
  return _contract;
}

function
  _config_show() {
  let
    _line,
    _text;
  _text = [];
  _text.push(
    "      Wallet seed: {wallet_seed}".replace(
      "{wallet_seed}",
      wallet_seed));
  _text.push(
    "  Wallet password: {wallet_password_path}".replace(
      "{wallet_password_path}",
      wallet_password_path));
  _text.push(
    " Contract address: {contract_address}".replace(
      "{contract_address}",
      contract_address));
  _text.push(
    "Contract ABI path: {contract_abi_path}".replace(
      "{contract_abi_path}",
      contract_abi_path));
  _text.push(
    "Contract bytecode: {contract_bytecode_path}".replace(
      "{contract_bytecode_path}",
      contract_bytecode_path));
  _text.push(
    "   Target network: {target_network}".replace(
      "{target_network}",
      target_network));
  _text.push(
    "          API Key: {api_key_path}".replace(
      "{api_key_path}",
      api_key_path));
  for ( _line in _text ) {
    _msg_info(
      _line);
  }
}

function
  _usage() {
  let
    _line,
    _text;
  _text = [
    "Usage:",
    "  contract-get",
    "    <quiet>",
    "    <wallet_seed>",
    "    <wallet_password_path>",
    "    <contract_address>",
    "    <contract_abi_path>",
    "    <contract_bytecode_path>",
    "    <target_network>",
    "    (<api_key_path>)",
    "",
    "Args:",
    "  <quiet>                   Can be 'y' or 'n'",
    "                            Default: y",
    "  <wallet_seed>             Path of the seed phrase.",
    "  <wallet_password_path>    Wallet password path.",
    "  <contract_address>        Contract of the address one is",
    "                            getting the contract of.",
    "  <contract_abi_path>       Path of the contract ABI.",
    "  <contract_bytecode_path>  Path for the contract bytecode.",
    "  <target_network>          Network on which the contract",
    "                            resides.",
    "  <api_key_path>            Path of the API key for the",
    "                            contract ABI provider service.",
  ];
  for ( _line of _text ) {
    _msg_info(
      _line);
  }
  process.exit();
}

function _cmdline_parse() {
  quiet = "y";
  process.argv.forEach(
    function (
      _value,
      _index,
      _array) {
      if ( _index == 2 ) {
        quiet =
          _value;
      }
      if ( _index == 3 ) {
        wallet_seed =
          _value;
      }
      if ( _index == 4 ) {
        wallet_password_path =
          _value;
      }
      if ( _index == 5 ) {
        contract_address =
          _value;
      }
      if ( _index == 6 ) {
        contract_abi_path =
          _value;
      }
      if ( _index == 7 ) {
        contract_bytecode_path =
          _value;
      }
      if ( _index == 8 ) {
        target_network =
          _value;
      }
      if ( _index ==  9 ) {
        api_key_path =
          _value;
      }
    }
  );
  if ( contract_abi_path == "" &&
       contract_bytecode_path == "" ) {
    _usage();
  }
}

_global_variables();

if ( require.main == module ) {
  _cmdline_parse();
  _config_show();
  app_opts = [
    wallet_seed,
    wallet_password_path,
    contract_address,
    contract_abi_path,
    contract_bytecode_path,
    target_network,
    api_key_path,
  ];
  _contract_get.apply(
    null,
    app_opts);
}

module.exports = {
  _contract_get:
    _contract_get
};
