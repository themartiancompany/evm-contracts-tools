#!/usr/bin/env bash
#
# SPDX-License-Identifier: AGPL-3.0-or-later

_bin="$( \
  dirname \
    "$( \
      command \
        -v \
	  "env")")"
_lib="${_bin}/../lib"
source \
  "${_lib}/libcrash-bash/crash-bash"

# shellcheck disable=SC2034
_global_variables() {
  call_date=""
  call_type=""
  wallet_name=""
  wallet_path=""
  wallet_password=""
  wallet_address=""
  wallet_seed=""
  api_key=""
  target_network=""
  contract_address=""
  contract_bytecode=""
  contract_abi=""
  contract_method=""
  method_args=()
  color=""
  quiet=""
}

_requirements() {
  _check_cmd \
    'evm-contracts-abi-get'
  _check_cmd \
    'evm-wallet'
  _check_cmd \
    'node' \
    'nodejs'
}

_get_conf_dir_path() {
  local \
    _dir
  _dir="${HOME}/.config/$( \
    _get \
      "app" \
      "name")"
  echo \
    "${_dir}"
}

_evm_contract_call_type() {
  local \
    _type="${1}" \
    _lib
  _lib="$( \
    _get_lib)/evm-contracts-tools"
  echo \
    "${_lib}/evm-contract-call-${_type}"
}

_node_run() {
  local \
    _cmd="${1}" \
    _args=() \
    _node_path \
    _lib
  shift \
    1
  _args=(
    "$@"
  )
  _lib="$( \
    _get_lib)"
  _node_path="${_lib}/node_modules" 
  export \
    NODE_PATH="${_node_path}"
  NODE_PATH="${_node_path}" \
  node \
    "${_cmd}" \
      "${_args[@]}" || \
    true
}

_network_setup() {
  if [[ "${_network}" == "gnosis" ]]; then
    _rpc="https://rpc.gnosischain.com"
    _network_backend="${_network}"
  elif [[ "${_network}" == "ethereum" ]]; then
    _network_backend="etherscan"
  else
    _network_backend="${_network}"
  fi
}

_api_key_read() {
  local \
    _path="${1}"
  if [ ! -e "${_path}" ]; then
    _msg_error \
      "service api key file '${_path}' not found" \
      1
  fi
  cat \
    "${_path}"
}

_evm_contract_call() {
  local \
    _call_type="${1}" \
    _wallet_name="${2}" \
    _wallet_path="${3}" \
    _wallet_password="${4}" \
    _wallet_seed="${5}" \
    _api_key_path="${6}" \
    _network="${7}" \
    _contract_address="${8}" \
    _contract_abi_path="${9}" \
    _contract_bytecode_path="${10}" \
    _contract_method="${11}" \
    _method_args=() \
    _cmd \
    _args=() \
    _abi \
    _api_key \
    _network_backend
  shift \
    11
  _method_args+=(
    "$@"
  )
  _abi="\"$( \
    cat \
      "${_contract_abi_path}")\""
  _api_key="$( \
    _api_key_read \
      "${_api_key_path}")"
  _network_setup
  _cmd="$( \
    _evm_contract_call_type \
      "${_call_type}")"
  if [[ "${_call_type}" == "static" ]]; then
    _args+=(
      "${quiet}"
      "${_api_key_path}"
      "${_network_backend}"
      "${_contract_abi_path}"
      "${_contract_bytecode_path}"
      "${_contract_address}"
      "${_contract_method}"
      "${_method_args[@]}"
    )
  elif [[ "${_call_type}" == "dynamic" ]]; then
    _args+=(
      "${quiet}"
      "${_wallet_seed}"
      "${_wallet_password}"
      "${_api_key_path}"
      "${_network_backend}"
      "${_contract_address}"
      "${_abi}"
      "${_contract_bytecode_path}"
      "${_contract_method}"
      "${_method_args[@]}"
    )
  fi
  _node_run \
    "${_cmd}" \
    "${_args[@]}"
}

_wallet_path_get() {
  local \
    _wallet_name="${1}" \
    _path \
    _wallet_address
  _wallet_address="$( \
    evm-wallet \
      get \
        "${_wallet_name}" \
        "address")"
  _path="${HOME}/.config/evm-wallet/${_wallet_name}.dat"
  echo \
    "${_path}"
}

_wallet_password_get() {
  local \
    _wallet_name="${1}" \
    _path
  _path="${HOME}/.config/evm-wallet/${_wallet_name}-password.txt"
  echo \
    "${_path}"
}

_wallet_seed_get() {
  local \
    _wallet_name="${1}" \
    _path
  _path="${HOME}/.config/evm-wallet/${_wallet_name}-seed.txt"
  echo \
    "${_path}"
}

_wallet_address_get() {
  local \
    _wallet_name="${1}" \
    _wallet_address
  _wallet_address="$( \
    evm-wallet \
      get \
        "${_wallet_name}" \
        "address")"
  echo \
    "${_wallet_address}"
}

_api_key_get() {
  local \
    _name="${1}" \
    _network="${2}" \
    _conf_dir \
    _service
  if [[ "${_network}" == "ethereum" ]]; then
    _service="etherscan"
  elif [[ "${_network}" == "gnosis" ]]; then
    _service="gnosisscan"
  fi
  _conf_dir="${HOME}/.config/${_service}"
  mkdir \
    -p \
    "${_conf_dir}"
  echo \
    "${_conf_dir}/${_name}.txt"
}

_contract_abi_auto_detect() {
  local \
    _abi \
    _address \
    _data_dir \
    _evm_contracts_abi_get_opts=() \
    _key \
    _msg=() \
    _network
  _network="$( \
    _get \
      "target" \
      "network")"
  _address="$( \
    _get \
      "contract" \
      "address")"
  _key="$( \
    _get \
      "api" \
      "key")"
  if [ ! -e "${contract_abi}" ]; then
    _msg=(
      "contract ABI '${contract_abi}'"
      "does not exist, obtaining from"
      "the network's contract ABI provider."
    )
    _msg_info \
      "${_msg[*]}"
    if [ ! -e "${_key}" ]; then
      _msg=(
        "contract ABI provider API"
        "key '${_key}' not found,"
        "won't fetch the ABI from the"
        "internet."
      )
      _msg_warning \
        "${_msg[*]}"
      contract_abi=""
    fi
    if [ -e "${_key}" ]; then
      _data_dir="$( \
        dirname \
          "${contract_abi}")"
      mkdir \
        -p \
        "${_data_dir}"
      chmod \
        700 \
        "${_data_dir}"
      if [[ "${quiet}" == "n" ]]; then
        _evm_contracts_abi_get_opts+=(
          --verbose
        )
      fi
      _evm_contracts_abi_get_opts+=(
        --network
          "${_network}"
        --key 
          "${_key}"
        --output-file
          "${contract_abi}"
      )
      evm-contracts-abi-get \
        "${_evm_contracts_abi_get_opts[@]}" \
          "${_address}"
      if [ $? -eq 0 ]; then
        _msg_info \
          "obtained ABI from a network explorer"
      else
        _msg=(
          "Couldn't obtain contract ABI"
          "from the provider."
        )
        _msg_error \
          "${_msg[*]}" \
          0
      fi
    fi
  fi
  _set \
    "contract" \
    "abi" \
    "${contract_abi}"
}

_set_overrides() {
  local \
    _data_dir
  _data_dir="${HOME}/.local/share/$(_get "app" "name")"
  _set_override \
    "call" \
    "date" \
    "$(_get_date_human)"
  _set_override \
    "contract" \
    "address" \
    ""
  _set_override \
    "wallet" \
    "name" \
    "default"
  _set_override \
    "target" \
    "network" \
    "gnosis"
  _set_override \
    "call" \
    "type" \
    "static"
  _set_override \
    "api" \
    "key" \
    "$(_api_key_get \
         "default" \
         "$(_get \
              "target" \
              "network")")"
  if [[ "$(_get \
             "contract" \
             "address")" != "" ]]; then
    _set_override \
      "contract" \
      "abi" \
      "${_data_dir}/${target_network}/${contract_address}.abi.json"
    _set_override \
      "contract" \
      "bytecode" \
      "${_data_dir}/${target_network}/${contract_address}.bytecode.json"
  fi
  if [[ "$(_get \
             "contract" \
             "address")" != "" ]]; then
    if [[ -n "contract_abi" ]]; then
      _contract_abi_auto_detect
    fi
  fi
  _set_override \
    "wallet" \
    "address" \
    "$(_wallet_address_get \
         "$(_get \
              "wallet" \
              "name")")"
  _set_override \
    "wallet" \
    "path" \
    "$(_wallet_path_get \
         "$(_get \
              "wallet" \
              "name")")"
  _set_override \
    "wallet" \
    "seed" \
    "$(_wallet_seed_get \
         "$(_get \
              "wallet" \
              "name")")"
  _set_override \
    "wallet" \
    "password" \
    "$(_wallet_password_get \
         "$(_get \
              "wallet" \
              "name")")"
  if [[ -v override_quiet ]]; then
    quiet="${override_quiet}"
  elif [[ -z "${quiet}" ]]; then
    quiet="y"
  fi
  if [[ -v override_color ]]; then
    color="${override_color}"
  elif [[ -z "${color}" ]]; then
    color="n"
  fi
}

# Show help usage, with an exit status.
# $1: exit status number.
_usage() {
  local \
    _usage_text
  IFS='' \
    read \
      -r \
      -d '' \
      _usage_text << \
        ENDUSAGETEXT || true
Run a smart contract function 

Usage:
  $(_get "app" "name")
    [options]
    <address>
    <method>
    ([method_args])
  networks:
    alchemy
    ankr
    cloudflare
    chainstack
    etherscan
    gnosis
    infura
    publicPolygon
    quicknode
  options:
     -a <address>         Contract address.
     -B <abi>             Contract ABI.
                          Default: $(_get "contract" "bytecode")
     -n <network>         EVM network name ('mainnet', 'gnosis').
                          Default: $(_get "target" "network")
     -t <call_type>       Static or dynamic.
                          Default: $(_get "call" "type")
     -k <api_key>         Etherscan-like service key.
                          Default: $(_get "api" "key")
     -h                   This message.
     -c                   Enable color output
     -v                   Enable verbose output
ENDUSAGETEXT
  _printf \
    '%s\n' \
    "${_usage_text}"
  exit \
    "${1}"
}

_display_flags() {
  local \
    _flags=(
      "${1}"
    ) \
    _flag
  for _flag \
    in "${_flags[@]}"; do
  _msg_info \
    "                             ${_flag}"
  done
}

# Shows configuration options.
_show_config() {
  _msg_info "${app_name} configuration"
  _msg_info "                Call date:   $(_get "call" "date")"
  _msg_info "                Call type:   $(_get "call" "type")"
  _msg_info "              Wallet name:   $(_get "wallet" "name")"
  _msg_info "              Wallet path:   $(_get "wallet" "path")"
  _msg_info "          Wallet password:   $(_get "wallet" "password")"
  _msg_info "              Wallet seed:   $(_get "wallet" "seed")"
  _msg_info "                  API key:   $(_get "api" "key")"
  _msg_info "           Wallet address:   $(_get "wallet" "address")"
  _msg_info "           Target network:   $(_get "target" "network")"
  _msg_info "         Contract address:   $(_get "contract" "address")"
  _msg_info "             Contract ABI:   $(_get "contract" "abi")"
  _msg_info "        Contract bytecode:   $(_get "contract" "bytecode")"
  _msg_info "          Contract method:   $(_get "contract" "method")"
  _msg_info "         Method arguments:   $(_get "method" "args")"
}

_globals
_global_variables
_requirements
# shellcheck disable=SC2034
while \
  getopts \
    'A:B:N:w:p:s:a:n:t:k:cvh?' \
    arg; do
  case \
    "${arg}" in
    A) override_contract_abi="${OPTARG}" ;;
    B) override_contract_bytecode="${OPTARG}" ;;
    N) override_wallet_name="${OPTARG}" ;;
    w) override_wallet_path="${OPTARG}" ;;
    p) override_wallet_password="${OPTARG}" ;;
    s) override_wallet_seed="${OPTARG}" ;;
    a) override_contract_address="${OPTARG}" ;;
    n) override_target_network="${OPTARG}" ;;
    t) override_call_type="${OPTARG}" ;;
    k) override_api_key="${OPTARG}" ;;
    c) override_color="y" ;;
    v) override_quiet="n" ;;
    h|?) _set_overrides && \
         _usage \
           0 ;;
    *) _msg_error \
         "Invalid argument '${arg}'" \
         0 && \
       _usage \
         1 ;;
  esac
done
shift \
  $(( \
    OPTIND - 1 ))
_msg_info \
  "args: $@"
if (( $# < 1 )); then
  _msg_error \
    "no address given" \
    0
  _set_overrides
  _usage \
    1
fi
if (( $# < 2 )); then
  _msg_error \
    "no method given" \
    0
  _set_overrides
  _usage \
    1
fi
if (( 0 < $# )); then
  _set \
    "contract" \
    "address" \
    "${1}"
fi
if (( 1 < $# )); then
  _set \
    "contract" \
    "method" \
    "${2}"
fi
shift \
  2
method_args=(
  "$@"
)
_set_overrides
_config_user_init \
  "$( \
    _get \
      "app" \
      "name")"
_show_config
app_opts=(
  "$( \
    _get \
      "call" \
      "type")"
  "$( \
    _get \
      "wallet" \
      "name")"
  "$( \
    _get \
      "wallet" \
      "path")"
  "$( \
    _get \
      "wallet" \
      "password")"
  "$( \
    _get \
      "wallet" \
      "seed")"
  "$( \
    _get \
      "api" \
      "key")"
  "$( \
    _get \
      "target" \
      "network")"
  "$( \
    _get \
      "contract" \
      "address")"
  "$( \
    _get \
      "contract" \
      "abi")"
  "$( \
    _get \
      "contract" \
      "bytecode")"
  "$( \
    _get \
      "contract" \
      "method")"
  "${method_args[@]}"
)
_evm_contract_call \
  "${app_opts[@]}"
# vim:set sw=2 sts=-1 et:
