#!/usr/bin/env bash

# SPDX-License-Identifier: AGPL-3.0-or-later

#    ----------------------------------------------------------------------
#    Copyright Â© 2024, 2025  Pellegrino Prevete
#
#    All rights reserved
#    ----------------------------------------------------------------------
#
#    This program is free software: you can redistribute it and/or modify
#    it under the terms of the GNU Affero General Public License as published by
#    the Free Software Foundation, either version 3 of the License, or
#    (at your option) any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU Affero General Public License for more details.
#
#    You should have received a copy of the GNU Affero General Public License
#    along with this program.  If not, see <https://www.gnu.org/licenses/>.

_bin="$( \
  dirname \
    "$( \
      command \
        -v \
	  "env")")"
_lib="$( \
  realpath \
    "${_bin}/../lib")"
_crash_bash="${_lib}/libcrash-bash/crash-bash"
_libevm="${_lib}/libevm/libevm"
_sourced \
  "${_crash_bash}" 2>/dev/null || \
  source \
    "${_crash_bash}"
_sourced \
  "${_libevm}"

# shellcheck disable=SC2034
_global_variables() {
  call_date=""
  call_type=""
  index_retrieve=""
  contract_address=""
  contract_bytecode=""
  contract_compiler_output=""
  contract_abi=""
  contract_method=""
  method_args=()
  measure_unit=""
  color=""
  quiet=""
}

_requirements() {
  _check_cmd \
    'libevm-requirements' \
    'libevm'
  libevm-requirements
  _check_cmd \
    "evm-chains-explorers"
  _check_cmd \
    "evm-chains-info"
  _check_cmd \
    'evm-contracts-abi-get'
  _check_cmd \
    'evm-contracts-source-get' \
    'evm-contract-source-index'
  _check_cmd \
    'evm-wallet'
  _check_cmd \
    'node-run'
}

_evm_contract_call_type() {
  local \
    _type="${1}" \
    _lib
  _lib="$( \
    _get_lib)/evm-contracts-tools"
  echo \
    "${_lib}/evm-contract-call-${_type}"
}

_artifact_missing_reset() {
  local \
    _type="${1}" \
    _artifact \
    _msg=()
  _artifact="$( \
    _get \
      "_contract" \
      "${_type}")"
  if [[ ! -e "${_artifact}" ]]; then
    _msg=(
      "contract '${_type//_/ }' at"
      "'${_artifact}' does not"
      "exist."
    )
    _msg_info \
      "${_msg[*]}"
    _set \
      "_contract" \
      "${_type}" \
      ""
  fi
}

_artifacts_check() {
  local \
    _msg=()
  _artifact_missing_reset \
    "abi_path"
  _artifact_missing_reset \
    "bytecode_path"
  _artifact_missing_reset \
    "compiler_output_path"
  if [[ "${_contract_compiler_output_path}" == "" ]] && \
     [[ "${_contract_abi_path}" == "" ]]; then
    _msg=(
      "To safely perform an EVM contract call"
      "you have to provide either"
      "the contract ABI or"
      "an Hardhat compilation artifact."
    )
    _msg_error \
      "${_msg[*]}" \
      1
  fi
}

_evm_contract_call() {
  local \
    _call_type="${1}" \
    _call_timeout="${2}" \
    _wallet_name="${3}" \
    _wallet_path="${4}" \
    _wallet_password="${5}" \
    _wallet_seed="${6}" \
    _api_key_path="${7}" \
    _msg_value="${8}" \
    _measure_unit="${9}" \
    _retries_max="${10}" \
    _network="${11}" \
    _rpc_selection="${12}" \
    _contract_address="${13}" \
    _contract_abi_path="${14}" \
    _contract_bytecode_path="${15}" \
    _contract_compiler_output_path="${16}" \
    _contract_method="${17}" \
    _node_run_opts=() \
    _method_args=() \
    _cmd \
    _args=() \
    _rpc_backend \
    _msg=()
  shift \
    17
  _method_args+=(
    "$@"
  )
  _node_run_opts+=(
    -r
      "${_retries_max}"
  )
  _rpc_backend_get \
    "${_network}" \
    "${_rpc_selection}"
  _cmd="$( \
    _evm_contract_call_type \
      "${_call_type}")"
  _artifacts_check
  if [[ "${_call_type}" == "static" ]]; then
    _args+=(
      "${quiet}"
      "${_wallet_seed}"
      "${_retries_max}"
      "${_api_key_path}"
      "${_rpc_backend}"
      "${_contract_abi_path}"
      "${_contract_bytecode_path}"
      "${_contract_compiler_output_path}"
      "${_contract_address}"
      "${_contract_method}"
      "${_method_args[@]}"
    )
  elif [[ "${_call_type}" == "dynamic" ]]; then
    _args+=(
      "${quiet}"
      "${_retries_max}"
      "${_call_timeout}"
      "${_wallet_seed}"
      "${_wallet_password}"
      "${_api_key_path}"
      "${_msg_value}"
      "${_measure_unit}"
      "${_rpc_backend}"
      "${_contract_address}"
      "${_contract_abi_path}"
      "${_contract_bytecode_path}"
      "${_contract_compiler_output_path}"
      "${_contract_method}"
      "${_method_args[@]}"
    )
  fi
  _msg=(
    "Calling evm-contract-call-${_call_type}"
    "with arguments '${_args[*]}'."
  )
  _msg_info \
    "${_msg[*]}"
  node-run \
    "${_node_run_opts[@]}" \
    "${_cmd}" \
    "${_args[@]}"
}

# This overrides the LibEVM one
_contract_abi_auto_detect() {
  local \
    _abi \
    _address \
    _compiler_output \
    _key \
    _network \
    _abi_dir
  _network="${target_network}"
  _address="${contract_address}"
  _key="${api_key}"
  _abi="${contract_abi}"
  _compiler_output="${contract_compiler_output}"
  _abi_target="${_abi}"
  if [[ "${_abi_target}" == "" ]]; then
     _abi_target="$( \
      _default_artifact_path_get \
        "abi")"
  fi
  _abi_dir="$( \
    dirname \
      "${_abi}")"
  if [[ ! -e "${_abi}" ]] && \
     [[ ! -e "${_compiler_output}" ]]; then
    if [[ -e "${_abi_target}" ]]; then
      _abi="${_abi_target}"
    elif [[ ! -e "${_abi_target}" ]]; then
      _contract_artifacts_retrieve \
        "${_abi_dir}"
    fi
  fi
  _set \
    "contract" \
    "abi" \
    "${_abi}"
}

_default_artifact_path_get() {
  local \
    _type="${1}" \
    _address \
    _app \
    _artifact \
    _data_dir \
    _network
  _network="${target_network}"
  _address="${contract_address}"
  _app="${app_name}"
  _data_dir="${HOME}/.local/share/${_app}"
  if [[ "${_type}" == "abi" ]]; then
    _artifact="${_data_dir}/${_network}/${_address}.abi.json"
  elif [[ "${_type}" == "bytecode" ]]; then
    _artifact="${_data_dir}/${_network}/${_address}.bin"
  elif [[ "${_type}" == "compiler_output" ]]; then
    _artifact="${_data_dir}/${_network}/${_address}.json"
  fi
  echo \
    "${_artifact}"
}

# This overrides the LibEVM one
_contract_bytecode_auto_detect() {
  local \
    _bytecode
  _bytecode="$( \
    _default_artifact_path_get \
      "bytecode")"
  if [[ ! -e "${_bytecode}" ]]; then
    _bytecode=""
  fi
  _set_override \
    "contract" \
    "bytecode"
    "${_bytecode}"
}

_artifact_local_auto_detect() {
  local \
    _type="${1}" \
    _artifact
  _artifact="$( \
    _default_artifact_path_get \
      "${_type}")"
  _set_override \
    "contract" \
    "${_type}" \
    "${_artifact}"
}

_call_auth_auto_detect() {
  local \
    _call_auth
  if [[ "${call_type}" == "static"  ]]; then
    _call_auth="n"
  elif [[ "${call_type}" == "dynamic"  ]]; then
    _call_auth="y"
  fi
  _set_override \
    "call" \
    "auth" \
    "${_call_auth}"
}

_set_overrides() {
  local \
    _abi \
    _bytecode \
    _compiler_output \
    _data_dir
  if [[ -v override_quiet ]]; then
    quiet="${override_quiet}"
  elif [[ -z "${quiet}" ]]; then
    quiet="y"
  fi
  if [[ -v override_color ]]; then
    color="${override_color}"
  elif [[ -z "${color}" ]]; then
    color="n"
  fi
  _data_dir="${HOME}/.local/share/${app_name}"
  _set_override \
    "call" \
    "date" \
    "$(_get_date_human)"
  _set_override \
    "wallet" \
    "name" \
    "default"
  _set_override \
    "index" \
    "retrieve" \
    "n"
  _set_override \
    "contract" \
    "address" \
    ""
  _set_override \
    "retries" \
    "max" \
    "300"
  _set_override \
    "target" \
    "network" \
    "100"
  _set_override \
    "rpc" \
    "selection" \
    "kirsh"
  _set_override \
    "call" \
    "type" \
    "static"
  _call_auth_auto_detect
  _set_override \
    "call" \
    "timeout" \
    "300000"
  _set_override \
    "measure" \
    "unit" \
    "ether"
  _set_override \
    "msg" \
    "value" \
    "0"
  _api_key_auto_detect \
    "${target_network}"
  if [[ "${contract_address}" != "" ]]; then
    _set_override \
      "contract" \
      "abi" \
      "$(_default_artifact_path_get \
           "abi")"
    _artifact_local_auto_detect \
      "bytecode"
    _artifact_local_auto_detect \
      "compiler_output"
    if [[ "${contract_abi}" == "" ]] || 
       [[ "$(_default_artifact_path_get \
               "abi")" == "${contract_abi}" ]]; then
      _contract_abi_auto_detect
    fi
  fi
  _wallet_overrides_set \
    "evm-wallet" \
    "${wallet_name}" \
    "${call_auth}"
}

# Show help usage, with an exit status.
# $1: exit status number.
_usage() {
  local \
    _usage_text
  IFS='' \
    read \
      -r \
      -d '' \
      _usage_text << \
        ENDUSAGETEXT || true

Runs a smart contract function.

Usage:
  ${app_name}
    [options]
    <contract_address>
    <contract_method>
    ([method_args])

  networks:
    all those supported by
    'evm-chains-info' as
    well as directly RPC address

  options:
     -t <call_type>         Static or dynamic.
                            Default: ${call_type}
     -V <msg_value>         How much <measure_unit> attach to the
                            transaction.
                            Default: ${msg_value}
     -u <measure_unit>      Measure unit for the transaction
                            value. It can be 'ether' or 'wei'.
                            Default: ${measure_unit}
     -r <retries_max>       Maximum number of retries before
                            declaring the call failed.
                            Default: ${retries_max}
     -T <call_timeout>      Maximum number of milliseconds before
                            declaring the call failed.
                            Default: ${call_timeout}
     -S <rpc_selection>     RPC selection method. It can be
                            'kirsh' or 'random'.
                            Default: ${rpc_selection}
     -A <abi>               Contract ABI path.
                            Default: ${contract_abi}
     -B <bytecode>          Contract bytecode path.
                            Default: ${contract_bytecode}
     -C <compiler_output>   Contract compiler output
                            path (the hardhat artifact).
                            Default: ${contract_compiler_output}
     -I                     Enables retrieving contract's artifacts
                            from the EVM Contracts Source Index.
                            Default: ${index_retrieve}

  credentials options:
     -N <wallet_name>       EVM wallet name.
                            Default: ${wallet_name}
     -w <wallet_path>       EVM wallet file path.
                            Default: ${wallet_path}
     -p <wallet_path>       EVM wallet password file.
                            Default: ${wallet_password}
     -s <wallet_seed>       EVM wallet seed file.
                            Default: ${wallet_seed}
     -k <api_key>           Etherscan-like service key.
                            Default: ${api_key}

  libEVM options:
     -a                     Call authentication.
                            Default: ${call_auth}
     -n <network>           EVM network name. Accepted values
                            are all those supported by
                            evm-chains-info and RPC addresses.
                            Default: ${target_network}

     -h                     This message.
     -c                     Enable color output
     -v                     Enable verbose output
ENDUSAGETEXT
  _printf \
    '%s\n' \
    "${_usage_text}"
  exit \
    "${1}"
}

_display_array() {
  local \
    _array=() \
    _item
  _array+=(
    "$@"
  )
  for _item \
    in "${_array[@]}"; do
  _msg_info \
    "                             ${_item}"
  done
}

# Shows configuration options.
_show_config() {
  _msg_info "${app_name} configuration"
  _msg_info "                Call date:   ${call_date}"
  _msg_info "      Call authentication:   ${call_auth}"
  _msg_info "                Call type:   ${call_type}"
  _msg_info "              Max retries:   ${retries_max}"
  _msg_info "             Call timeout:   ${call_timeout}"
  _msg_info "              Wallet name:   ${wallet_name}"
  _msg_info "              Wallet path:   ${wallet_path}"
  _msg_info "          Wallet password:   ${wallet_password}"
  _msg_info "              Wallet seed:   ${wallet_seed}"
  _msg_info "                  API key:   ${api_key}"
  _msg_info "           Wallet address:   ${wallet_address}"
  _msg_info "            Message value:   ${msg_value}"
  _msg_info "             Measure unit:   ${measure_unit}"
  _msg_info "           Target network:   ${target_network}"
  _msg_info "     RPC selection method:   ${rpc_selection}"
  _msg_info "         Contract address:   ${contract_address}"
  _msg_info "             Contract ABI:   ${contract_abi}"
  _msg_info "        Contract bytecode:   ${contract_bytecode}"
  _msg_info " Contract compiler output:   ${contract_compiler_output}"
  _msg_info "          Contract method:   ${contract_method}"
  _msg_info "         Method arguments:   "
  _display_array                          "${method_args[@]}"

}

_globals
_global_variables
_libevm_global_variables
_requirements
# shellcheck disable=SC2034
getopts_opts="$( \
  printf \
    "%s" \
    "t:T:I:V:u:r:S:" \
    "A:B:C:" \
    "$(_libevm_app_getopts_params_get)" \
    "a:n:" \
    "$(_wallet_getopts_params_get)" \
    "cvh")"
while \
  getopts \
    "${getopts_opts}" \
    arg; do
  _wallet_getopts_case
  _libevm_app_getopts_case
  case \
    "${arg}" in
    t) \
      override_call_type="${OPTARG}" ;;
    T) \
      override_call_timeout="${OPTARG}" ;;
    I) \
      override_index_retrieve="y" ;;
    V) \
      override_msg_value="${OPTARG}" ;;
    u) \
      override_measure_unit="${OPTARG}" ;;
    r) \
      override_retries_max="${OPTARG}" ;;
    S) \
      override_rpc_selection="${OPTARG}" ;;
    A) \
      override_contract_abi="${OPTARG}" ;;
    B) \
      override_contract_bytecode="${OPTARG}" ;;
    C) \
      override_contract_compiler_output="${OPTARG}" ;;
    a) \
      override_call_auth="y" ;;
    n) \
      override_target_network="${OPTARG}" ;;
    c) \
      override_color="y" ;;
    v) \
      override_quiet="n" ;;
    h) \
      _set_overrides && \
      _usage \
        0 ;;
    *) \
      if [[ " ${getopts_opts} " != *"${arg}"* ]]; then
        _msg_error \
          "Invalid argument '${arg}'." \
          0
        _usage \
          1
      fi ;;
  esac
done
shift \
  $(( \
    OPTIND - 1 ))
if (( $# < 1 )); then
  _msg_error \
    "No address given." \
    0
  _set_overrides
  _usage \
    1
fi
if (( $# < 2 )); then
  _msg_error \
    "No method given." \
    0
  _set_overrides
  _usage \
    1
fi
if (( 0 < $# )); then
  contract_address="${1}"
fi
if (( 1 < $# )); then
  contract_method="${2}"
fi
shift \
  2
method_args=(
  "$@"
)
_set_overrides
_show_config
app_opts=(
  "${call_type}"
  "${call_timeout}"
  "${wallet_name}"
  "${wallet_path}"
  "${wallet_password}"
  "${wallet_seed}"
  "${api_key}"
  "${msg_value}"
  "${measure_unit}"
  "${retries_max}"
  "${target_network}"
  "${rpc_selection}"
  "${contract_address}"
  "${contract_abi}"
  "${contract_bytecode}"
  "${contract_compiler_output}"
  "${contract_method}"
  "${method_args[@]}"
)
_evm_contract_call \
  "${app_opts[@]}"

# vim:set sw=2 sts=-1 et:
