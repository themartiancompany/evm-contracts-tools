#!/usr/bin/env bash
#
# SPDX-License-Identifier: AGPL-3.0-or-later

_bin="$( \
  dirname \
    "$( \
      command \
        -v \
	  "env")")"
_lib="${_bin}/../lib"
source \
  "${_lib}/libcrash-bash/crash-bash"

# shellcheck disable=SC2034
_global_variables() {
  call_type=""
  target_network=""
  contract_address=""
  contract_method=""
  contract_abi=""
  api_key=""
  method_args=()
  color=""
  quiet=""
}

_requirements() {
  local \
    _app
    _check_cmd \
      'node' \
      'nodejs'
  _check_cmd \
    'evm-contracts-abi-get'
}

_get_conf_dir_path() {
  local \
    _dir
  _dir="${HOME}/.config/$( \
    _get \
      "app" \
      "name")"
  echo \
    "${_dir}"
}

_evm_contract_call_type() {
  local \
    _type="${1}" \
    _lib
  _lib="$( \
    _get_lib)/evm-contracts-tools"
  echo \
    "${_lib}/evm-contract-call-${_type}"
}

_node_run() {
  local \
    _cmd="${1}" \
    _args=() \
    _node_path \
    _lib
  shift \
    1
  _args=(
    "$@"
  )
  _lib="$( \
    _get_lib)"
  _node_path="${_lib}/node_modules" 
  export \
    NODE_PATH="${_node_path}"
  NODE_PATH="${_node_path}" \
  node \
    "${_cmd}" \
      "${_args[@]}" || \
    true
}

_network_setup() {
  if [[ "${_network}" == "gnosis" ]]; then
    _rpc="https://rpc.gnosischain.io"
    _network_backend="${_rpc}"
  fi
  if [[ "${_network}" == "ethereum" ]]; then
    _network_backend="etherscan"
  fi
}

_api_key_read() {
  local \
    _path="${1}"
  if [ ! -e "${_path}" ]; then
    _msg_error \
      "service api key file '${_path}' not found" \
      1
  fi
  cat \
    "${_api_key_path}"
}

_evm_contract_call() {
  local \
    _call_type="${1}" \
    _contract_address="${2}" \
    _contract_method="${3}" \
    _contract_abi="${4}" \
    _target_network="${5}" \
    _api_key_path="${6}" \
    _method_args=() \
    _cmd \
    _args=() \
    _abi \
    _api_key
  shift \
    6
  _method_args+=(
    "$@"
  )
  _abi="$( \
    cat \
      "${_contract_abi}")"
  _api_key="$( \
    _api_key_read \
      "${_api_key_path}")"
  _network_setup
  if [[ "${_call_type}" == "static" ]]; then
    _cmd="$( \
      _evm_contract_call_type \
        "${_call_type}")"
    _args+=(
      "${_contract_address}"
      "${_contract_method}"
      "${_abi}"
      "${_target_network}"
      "${_api_key}"
      "${_method_args[@]}"
    )
  fi
  _node_run \
    "${_cmd}" \
    "${_args[@]}"
}

_api_key_get() {
  local \
    _name="${1}" \
    _network="${2}" \
    _conf_dir \
    _service
  if [[ "${_network}" == "ethereum" ]]; then
    _service="etherscan"
  elif [[ "${_network}" == "gnosis" ]]; then
    _service="gnosisscan"
  fi
  _conf_dir="${HOME}/.config/${_service}"
  mkdir \
    -p \
    "${_conf_dir}"
  echo \
    "${_conf_dir}/${_name}.txt"
}

_contract_abi_auto_detect() {
  local \
    _conf_dir \
    _address \
    _contract_abi \
    _network \
    _key \
    _evm_contracts_abi_get_opts=()
  _network="$( \
    _get \
      "target" \
      "network")"
  _address="$( \
    _get \
      "contract" \
      "address")"
  _key="$( \
    _get \
      "api" \
      "key")"
  _conf_dir="${HOME}/.local/share/evm-contracts-tools"
  _contract_abi="${_conf_dir}/${_network}/${_address}.json"
  if [ ! -e "${_contract_abi}" ]; then
    mkdir \
      -p \
      "$(dirname \
           "${_contract_abi}")"
    chmod \
      700 \
      "${_conf_dir}"
    _evm_contracts_abi_get_opts+=(
      --network
        "${_network}"
      --key
        "${_key}"
    )
    evm-contracts-abi-get \
      "${_evm_contracts_abi_get_opts[@]}" \
      "${_address}" > \
      "${_contract_abi}"
  fi
  echo \
    "${_contract_abi}"
}

_set_overrides() {
  _set_override \
    "contract" \
    "address" \
    ""
  _set_override \
    "target" \
    "network" \
    "gnosis"
  _set_override \
    "call" \
    "type" \
    "static"
  _set_override \
    "contract" \
    "abi" \
    "$(_contract_abi_auto_detect)"
  _set_override \
    "api" \
    "key" \
    "$(_api_key_get \
         "$(_get \
              "target" \
              "network")")"
  _set_override \
    "contract" \
    "abi" \
    "$(_contract_abi_auto_detect)"
  if [[ -v override_quiet ]]; then
    quiet="${override_quiet}"
  elif [[ -z "${quiet}" ]]; then
    quiet="y"
  fi
  if [[ -v override_color ]]; then
    color="${override_color}"
  elif [[ -z "${color}" ]]; then
    color="n"
  fi
}

# Show help usage, with an exit status.
# $1: exit status number.
_usage() {
  local \
    _usage_text
  IFS='' \
    read \
      -r \
      -d '' \
      _usage_text << \
        ENDUSAGETEXT || true
Run a smart contract function 

Usage:
  $(_get "app" "name")
    [options]
    <address>
    <method>
    ([method_args])
  networks:
    alchemy
    ankr
    cloudflare
    chainstack
    etherscan
    gnosis
    infura
    publicPolygon
    quicknode
  options:
     -a <address>         Contract address.
     -A <abi>             Contract ABI.
                          Default: $(_get "contract" "abi")
     -n <network>         EVM network name ('mainnet', 'gnosis').
                          Default: $(_get "target" "network")
     -t <call_type>       Static or dynamic.
                          Default: $(_get "call" "type")
     -k <api_key>         Etherscan-like service key.
                          Default: $(_get "api" "key")
     -h                   This message.
     -c                   Enable color output
     -v                   Enable verbose output
ENDUSAGETEXT
  _printf \
    '%s\n' \
    "${_usage_text}"
  exit \
    "${1}"
}

_display_flags() {
  local \
    _flags=(
      "${1}"
    ) \
    _flag
  for _flag \
    in "${_flags[@]}"; do
  _msg_info \
    "                             ${_flag}"
  done
}

# Shows configuration options.
_show_config() {
  local \
    _call_date
  TZ=UTC \
  printf \
    -v \
      _call_date \
    '%(%FT%R%z)T' \
    "${SOURCE_DATE_EPOCH}"
  _msg_info "${app_name} configuration"
  _msg_info "                Call date:   $(_get "_call" "date")"
  _msg_info "          Contract method:   $(_get "contract" "method")"
  _msg_info "         Contract address:   $(_get "contract" "address")"
  _msg_info "         Method arguments:   $(_get "method" "args")"
  _msg_info "             Contract ABI:   $(_get "contract" "abi")"
  _msg_info "           Target network:   $(_get "target" "network")"
  _msg_info "                Call type:   $(_get "call" "type")"
  _msg_info "            Etherscan key:   $(_get "api" "key")"
}

_globals
_global_variables
_requirements
_config_user_init \
  "$(_get \
       "app" \
       "name")"
# shellcheck disable=SC2034
while \
  getopts \
    'a:A:n:t:k:cvh?' \
    arg; do
  case \
    "${arg}" in
    a) override_contract_address="${OPTARG}" ;;
    A) override_contract_abi="${OPTARG}" ;;
    n) override_target_network="${OPTARG}" ;;
    t) override_call_type="${OPTARG}" ;;
    k) override_api_key="${OPTARG}" ;;
    c) override_color="y" ;;
    v) override_quiet="n" ;;
    h|?) _set_overrides && \
         _usage \
           0 ;;
    *)
    _msg_error \
      "Invalid argument '${arg}'" \
      0
    _usage \
      1
    ;;
  esac
done
shift \
  $(( \
    OPTIND - 1 \
  ))
if (( $# < 1 )); then
  _msg_error \
    "no address given" \
    0
  _set_overrides
  _usage \
    1
if (( $# < 2 )); then
  _msg_error \
    "no method given" \
    0
  _set_overrides
  _usage \
    1
fi
fi
_set \
  "contract" \
  "address" \
  "${1}"
if (( 1 < $# )); then
  _set \
    "contract" \
    "method" \
    "${2}"
fi
shift \
  2
method_args=(
  "$@"
)
_set_overrides
_config_user_init \
  "$( \
    _get \
      "app" \
      "name")"
_show_config
app_opts=(
  "$( \
    _get \
      "call" \
      "type")"
  "$( \
    _get \
      "contract" \
      "address")"
  "$( \
    _get \
      "contract" \
      "method")"
  "$( \
    _get \
      "contract" \
      "abi")"
  "$( \
    _get \
      "target" \
      "network")"
  "$( \
    _get \
      "api" \
      "key")"
  "${method_args[@]}"
)

_evm_contract_call \
  "${app_opts[@]}"

# vim:set sw=2 sts=-1 et:
