#!/usr/bin/env bash
#
# SPDX-License-Identifier: AGPL-3.0-or-later

_bin="$( \
  dirname \
    "$( \
      command \
        -v \
	  "env")")"
_lib="${_bin}/../lib"
source \
  "${_lib}/libcrash-bash/crash-bash"

# shellcheck disable=SC2034
_global_variables() {
  call_date=""
  call_type=""
  wallet_name=""
  wallet_path=""
  wallet_password=""
  wallet_address=""
  wallet_seed=""
  api_key=""
  target_network=""
  contract_address=""
  contract_bytecode=""
  contract_compiler_output=""
  contract_abi=""
  contract_method=""
  method_args=()
  msg_value=""
  measure_unit=""
  retries_max=""
  color=""
  quiet=""
}

_requirements() {
  _check_cmd \
    "evm-chains-explorers"
  _check_cmd \
    "evm-chains-info"
  _check_cmd \
    'evm-contracts-abi-get'
  _check_cmd \
    'evm-wallet'
  _check_cmd \
    'node' \
    'nodejs'
}

_get_conf_dir_path() {
  local \
    _dir
  _dir="${HOME}/.config/$( \
    _get \
      "app" \
      "name")"
  echo \
    "${_dir}"
}

_evm_contract_call_type() {
  local \
    _type="${1}" \
    _lib
  _lib="$( \
    _get_lib)/evm-contracts-tools"
  echo \
    "${_lib}/evm-contract-call-${_type}"
}

_node_run() {
  local \
    _retries_max="${1}" \
    _cmd="${2}" \
    _args=() \
    _node_path \
    _lib \
    _retry \
    _msg=()
  shift \
    2
  _args=(
    "$@"
  )
  _retry=
  _lib="$( \
    _get_lib)"
  _node_path="${_lib}/node_modules" 
  export \
    NODE_PATH="${_node_path}"
  for _retry \
    in $(seq "${_retries_max}"); do
    if NODE_PATH="${_node_path}" \
       node \
         "${_cmd}" \
         "${_args[@]}"; then
      return
    else
      _msg=(
        "contract calling error,"
        "retry '${_retry}' out of"
        "'${_retries_max}'"
      )
      _msg_error \
        "${_msg[*]}" \
        "0"
    fi
  done
  return \
    1
}

_network_setup() {
  local \
    _chain="${1}" \
    _chain_name \
    _chain_id \
    _rpc \
    _msg=()
  _msg=(
    "looking for info on EVM blockchain"
    "'${_chain}'"
  )
  _msg_info \
    "${_msg[*]}"
  _chain_id="$( \
    evm-chains-info \
      -o \
        "id" \
      "${_chain}")"
  if [[ "${_chain_id}" != "" ]]; then
    _chain_name="$( \
      evm-chains-info \
        -o \
          "name" \
        "${_chain}" 2>/dev/null || \
        true)"
    _msg=(
      "Found blockchain '${_chain_name}'"
      "with id '${_chain_id}'"
      "Selecting RPC address with"
      "criterion 'kirsh'"
    )
    _msg_info \
      "${_msg[*]}"
    _rpc="$( \
      evm-chains-info \
        -o \
          "rpc" \
        -s \
          "kirsh" \
        "${_chain}")"
  elif [[ "${_chain_id}" == "" ]]; then
    _msg=(
      "Found no known blockchain for input"
      "'${_chain}', interpreting given input"
      "as an rpc address for the selected"
      "network."
    )
    _msg_info \
      "${_msg[*]}"
    _rpc="${_chain}"
  fi
  _msg=(
    "Selected RPC address"
    "'${_rpc}'"
  )
  _msg_info \
    "${_msg[*]}"
  _network_backend="${_rpc}"
}

_artifact_missing_reset() {
  local \
    _type="${1}" \
    _artifact \
    _msg=()
  _artifact="$( \
    _get \
      "_contract" \
      "${_type}")"
  if [[ ! -e "${_artifact}" ]]; then
    _msg=(
      "contract '${_type//_/ }' at"
      "'${_artifact}' does not"
      "exist."
    )
    _msg_warning \
      "${_msg[*]}"
    _set \
      "_contract" \
      "${_type}" \
      ""
  fi
}

_artifacts_check() {
  local \
    _msg=()
  _artifact_missing_reset \
    "abi_path"
  _artifact_missing_reset \
    "bytecode_path"
  _artifact_missing_reset \
    "compiler_output_path"
  if [[ "${_contract_compiler_output_path}" == "" ]] && \
     [[ "${_contract_abi_path}" == "" ]]; then
    _msg=(
      "to safely perform an EVM contract call"
      "you have to provide either"
      "the contract abi or"
      "an hardhat compilation artifact"
    )
    _msg_error \
      "${_msg[*]}" \
      1
  fi
}

_evm_contract_call() {
  local \
    _call_type="${1}" \
    _wallet_name="${2}" \
    _wallet_path="${3}" \
    _wallet_password="${4}" \
    _wallet_seed="${5}" \
    _api_key_path="${6}" \
    _msg_value="${7}" \
    _measure_unit="${8}" \
    _retries_max="${9}" \
    _network="${10}" \
    _contract_address="${11}" \
    _contract_abi_path="${12}" \
    _contract_bytecode_path="${13}" \
    _contract_compiler_output_path="${14}" \
    _contract_method="${15}" \
    _method_args=() \
    _cmd \
    _args=() \
    _network_backend \
    _msg=()
  shift \
    15
  _method_args+=(
    "$@"
  )
  _network_setup \
    "${_network}"
  _cmd="$( \
    _evm_contract_call_type \
      "${_call_type}")"
  _artifacts_check
  if [[ "${_call_type}" == "static" ]]; then
    _args+=(
      "${quiet}"
      "${_api_key_path}"
      "${_network_backend}"
      "${_contract_abi_path}"
      "${_contract_bytecode_path}"
      "${_contract_compiler_output_path}"
      "${_contract_address}"
      "${_contract_method}"
      "${_method_args[@]}"
    )
  elif [[ "${_call_type}" == "dynamic" ]]; then
    _args+=(
      "${quiet}"
      "${_wallet_seed}"
      "${_wallet_password}"
      "${_api_key_path}"
      "${_msg_value}"
      "${_measure_unit}"
      "${_network_backend}"
      "${_contract_address}"
      "${_contract_abi_path}"
      "${_contract_bytecode_path}"
      "${_contract_compiler_output_path}"
      "${_contract_method}"
      "${_method_args[@]}"
    )
  fi
  _msg=(
    "calling evm-contract-call-${_call_type}"
    "with arguments '${_args[*]}'"
  )
  _msg_info \
    "${_msg[*]}"
  _node_run \
    "${_retries_max}" \
    "${_cmd}" \
    "${_args[@]}"
}

_wallet_path_get() {
  local \
    _wallet_name="${1}" \
    _path \
    _wallet_address
  _wallet_address="$( \
    evm-wallet \
      get \
        "${_wallet_name}" \
        "address")"
  _path="${HOME}/.config/evm-wallet/${_wallet_name}.dat"
  echo \
    "${_path}"
}

_wallet_password_get() {
  local \
    _wallet_name="${1}" \
    _path
  _path="${HOME}/.config/evm-wallet/${_wallet_name}-password.txt"
  echo \
    "${_path}"
}

_wallet_seed_get() {
  local \
    _wallet_name="${1}" \
    _path
  _path="${HOME}/.config/evm-wallet/${_wallet_name}-seed.txt"
  echo \
    "${_path}"
}

_wallet_address_get() {
  local \
    _wallet_name="${1}" \
    _wallet_address
  _wallet_address="$( \
    evm-wallet \
      get \
        "${_wallet_name}" \
        "address")"
  echo \
    "${_wallet_address}"
}

_api_key_auto_detect() {
  local \
    _chain="${1}" \
    _chain_name \
    _key \
    _msg=()
  _key="$( \
    evm-chains-explorers \
      -c \
        "${_chain}" \
      -s \
        'kirsh' \
      get \
        keys)"
  _chain_name="$( \
    evm-chains-info \
      -o \
        "name" \
      "${_chain}")"
  if [[ ! -e "${_key}" ]]; then
    _msg=(
      "Found no provider services"
      "keys for chain '${_chain_name}'."
      "Check available service"
      "providers with \"evm-chains-info"
      "-o explorers '${_chain}'\""
      "and add the relative api key in"
      "'<user_home>/.config/evm-chains-explorers/<service>/default.txt'"
    )
    _msg_info \
      "${_msg[*]}"
  fi
  _set_override \
    "api" \
    "key" \
    "${_key}"
}

_contract_abi_retrieve() {
  local \
    _evm_contracts_abi_get_opts=() \
    _msg=() \
    _data_dir
  _msg=(
    "no contract ABI or compiler output"
    "available, attempting to obtain it from"
    "a network's contracts ABI provider"
    "at path '${_abi_target}'"
  )
  _msg_info \
    "${_msg[*]}"
  _data_dir="$( \
    dirname \
      "${_abi}")"
  mkdir \
    -p \
    "${_data_dir}"
  chmod \
    700 \
    "${_data_dir}"
  if [[ "${quiet}" == "n" ]]; then
    _evm_contracts_abi_get_opts+=(
      --verbose
    )
  fi
  _evm_contracts_abi_get_opts+=(
    --network
      "${_network}"
    --key 
      "${_key}"
    --output-file
      "${_abi_target}"
  )
  if [ ! -e "${_key}" ]; then
    _msg=(
      "contract ABI provider API"
      "key '${_key}' not found,"
      "fetch the ABI from the"
      "provider may not work."
    )
    _msg_info \
      "${_msg[*]}"
  elif [ -e "${_key}" ]; then
    _evm_contracts_abi_get_opts+=(
      --key 
        "${_key}"
    )
  fi
  evm-contracts-abi-get \
    "${_evm_contracts_abi_get_opts[@]}" \
      "${_address}"
  if [ $? -eq 0 ]; then
    _msg=(
      "obtained ABI from a network explorer,"
      "setting contract ABI value to '${_abi_target}'"
    )
    _msg_info \
      "${_msg[*]}"
    _abi="${_abi_target}"
  else
    _msg=(
      "Couldn't obtain contract ABI"
      "from the provider, blanking contract ABI value."
    )
    _msg_info \
      "${_msg[*]}"
    _abi=""
  fi
}

_contract_abi_auto_detect() {
  local \
    _abi \
    _address \
    _compiler_output \
    _key \
    _network
  _network="$( \
    _get \
      "target" \
      "network")"
  _address="$( \
    _get \
      "contract" \
      "address")"
  _key="$( \
    _get \
      "api" \
      "key")"
  _abi="$( \
    _get \
      "contract" \
      "abi")"
  _compiler_output="$( \
    _get \
      "contract" \
      "compiler_output")"
  _abi_target="${_abi}"
  if [[ "${_abi_target}" == "" ]]; then
     _abi_target="$( \
      _default_artifact_path_get \
        "abi")"
  fi
  if [[ ! -e "${_abi}" ]] && \
     [[ ! -e "${_compiler_output}" ]]; then
    if [[ -e "${_abi_target}" ]]; then
      _abi="${_abi_target}"
    elif [[ ! -e "${_abi_target}" ]]; then
      _contract_abi_retrieve
    fi
  fi
  _set \
    "contract" \
    "abi" \
    "${_abi}"
}

_default_artifact_path_get() {
  local \
    _type="${1}" \
    _address \
    _app \
    _artifact \
    _data_dir \
    _network
  _network="$( \
    _get \
      "target" \
      "network")"
  _address="$( \
    _get \
      "contract" \
      "address")"
  _app="$( \
    _get \
      "app" \
      "name")"
  _data_dir="${HOME}/.local/share/${_app}"
  if [[ "${_type}" == "abi" ]]; then
    _artifact="${_data_dir}/${_network}/${_address}.abi.json"
  elif [[ "${_type}" == "bytecode" ]]; then
    _artifact="${_data_dir}/${_network}/${_address}.bin"
  elif [[ "${_type}" == "compiler_output" ]]; then
    _artifact="${_data_dir}/${_network}/${_address}.json"
  fi
  echo \
    "${_artifact}"
}

_contract_bytecode_auto_detect() {
  local \
    _bytecode
  _bytecode="$( \
    _default_artifact_path_get \
      "bytecode")"
  if [[ ! -e "${_bytecode}" ]]; then
    _bytecode=""
  fi
  _set_override \
    "contract" \
    "bytecode"
    "${_bytecode}"
}

_artifact_local_auto_detect() {
  local \
    _type="${1}" \
    _artifact
  _artifact="$( \
    _default_artifact_path_get \
      "${_type}")"
  _set_override \
    "contract" \
    "${_type}" \
    "${_artifact}"
}

_set_overrides() {
  local \
    _abi \
    _bytecode \
    _compiler_output \
    _data_dir
  if [[ -v override_quiet ]]; then
    quiet="${override_quiet}"
  elif [[ -z "${quiet}" ]]; then
    quiet="y"
  fi
  if [[ -v override_color ]]; then
    color="${override_color}"
  elif [[ -z "${color}" ]]; then
    color="n"
  fi
  _data_dir="${HOME}/.local/share/$(_get "app" "name")"
  _set_override \
    "call" \
    "date" \
    "$(_get_date_human)"
  _set_override \
    "retries" \
    "max" \
    "3"
  _set_override \
    "contract" \
    "address" \
    ""
  _set_override \
    "wallet" \
    "name" \
    "default"
  _set_override \
    "target" \
    "network" \
    "Gnosis"
  _set_override \
    "call" \
    "type" \
    "static"
  _api_key_auto_detect \
    "$(_get \
         "target" \
         "network")"
  if [[ "$(_get \
             "contract" \
             "address")" != "" ]]; then
    _set_override \
      "contract" \
      "abi" \
      "$(_default_artifact_path_get \
           "abi")"
    _artifact_local_auto_detect \
      "bytecode"
    _artifact_local_auto_detect \
      "compiler_output"
    if [[ "${contract_abi}" == "" ]] || 
       [[ "$(_default_artifact_path_get \
               "abi")" == "${contract_abi}" ]]; then
      _contract_abi_auto_detect
    fi
  fi
  _set_override \
    "wallet" \
    "address" \
    "$(_wallet_address_get \
         "$(_get \
              "wallet" \
              "name")")"
  _set_override \
    "wallet" \
    "path" \
    "$(_wallet_path_get \
         "$(_get \
              "wallet" \
              "name")")"
  _set_override \
    "wallet" \
    "seed" \
    "$(_wallet_seed_get \
         "$(_get \
              "wallet" \
              "name")")"
  _set_override \
    "wallet" \
    "password" \
    "$(_wallet_password_get \
         "$(_get \
              "wallet" \
              "name")")"
  _set_override \
    "measure" \
    "unit" \
    "ether"
  _set_override \
    "msg" \
    "value" \
    "0"
}

# Show help usage, with an exit status.
# $1: exit status number.
_usage() {
  local \
    _usage_text
  IFS='' \
    read \
      -r \
      -d '' \
      _usage_text << \
        ENDUSAGETEXT || true
Run a smart contract function 

Usage:
  $(_get "app" "name")
    [options]
    <contract_address>
    <contract_method>
    ([method_args])

  networks:
    all those supported by
    'evm-chains-info' as
    well as directly RPC address

  options:
     -A <abi>               Contract ABI path.
                            Default: $(_get "contract" "abi")
     -B <bytecode>          Contract bytecode path.
                            Default: $(_get "contract" "bytecode")
     -C <compiler_output>   Contract compiler output
                            path (the hardhat artifact).
                            Default: $(_get "contract_compiler" "output")
     -N <wallet_name>       EVM wallet name.
                            Default: $(_get "wallet" "name")
     -w <wallet_path>       EVM wallet file path.
                            Default: $(_get "wallet" "path")
     -p <wallet_path>       EVM wallet password file.
                            Default: $(_get "wallet" "password")
     -s <wallet_seed>       EVM wallet seed file.
                            Default: $(_get "wallet" "seed")
     -n <network>           EVM network name. Accepted values
                            are all those supported by
                            evm-chains-info and RPC addresses.
                            Default: $(_get "target" "network")
     -t <call_type>         Static or dynamic.
                            Default: $(_get "call" "type")
     -k <api_key>           Etherscan-like service key.
                            Default: $(_get "api" "key")
     -V <msg_value>         How much <measure_unit> attach to the
                            transaction.
                            Default: $(_get "msg" "value")
     -m <measure_unit>      Measure unit for the transaction
                            value. It can be 'ether' or 'wei'.
                            Default: $(_get "measure" "unit")
     -r <retries_max>       Maximum number of retries before
                            declaring the call failed.
                            Default: $(_get "retries" "max")


     -h                     This message.
     -c                     Enable color output
     -v                     Enable verbose output
ENDUSAGETEXT
  _printf \
    '%s\n' \
    "${_usage_text}"
  exit \
    "${1}"
}

_display_flags() {
  local \
    _flags=(
      "${1}"
    ) \
    _flag
  for _flag \
    in "${_flags[@]}"; do
  _msg_info \
    "                             ${_flag}"
  done
}

_display_flags() {
  local \
    _flags=(
      ${1}
    )
  for _flag \
    in "${_flags[@]}"; do
  _msg_info "                              ${_flag}"
  done
}

# Shows configuration options.
_show_config() {
  _msg_info "${app_name} configuration"
  _msg_info "                Call date:   $(_get "call" "date")"
  _msg_info "                Call type:   $(_get "call" "type")"
  _msg_info "              Max retries:   $(_get "retries" "max")"
  _msg_info "              Wallet name:   $(_get "wallet" "name")"
  _msg_info "              Wallet path:   $(_get "wallet" "path")"
  _msg_info "          Wallet password:   $(_get "wallet" "password")"
  _msg_info "              Wallet seed:   $(_get "wallet" "seed")"
  _msg_info "                  API key:   $(_get "api" "key")"
  _msg_info "           Wallet address:   $(_get "wallet" "address")"
  _msg_info "            Message value:   $(_get "msg" "value")"
  _msg_info "             Measure unit:   $(_get "measure" "unit")"
  _msg_info "           Target network:   $(_get "target" "network")"
  _msg_info "         Contract address:   $(_get "contract" "address")"
  _msg_info "             Contract ABI:   $(_get "contract" "abi")"
  _msg_info "        Contract bytecode:   $(_get "contract" "bytecode")"
  _msg_info " Contract compiler output:   $(_get "contract" "compiler_output")"
  _msg_info "          Contract method:   $(_get "contract" "method")"
  _msg_info "         Method arguments:   "
  _display_flags                          "${method_args[*]}"

}

_globals
_global_variables
_requirements
# shellcheck disable=SC2034
while \
  getopts \
    'A:B:C:N:w:p:s:n:t:k:V:u:r:cvh?' \
    arg; do
  case \
    "${arg}" in
    A) override_contract_abi="${OPTARG}" ;;
    B) override_contract_bytecode="${OPTARG}" ;;
    C) override_contract_compiler_output="${OPTARG}" ;;
    N) override_wallet_name="${OPTARG}" ;;
    w) override_wallet_path="${OPTARG}" ;;
    p) override_wallet_password="${OPTARG}" ;;
    s) override_wallet_seed="${OPTARG}" ;;
    n) override_target_network="${OPTARG}" ;;
    t) override_call_type="${OPTARG}" ;;
    k) override_api_key="${OPTARG}" ;;
    V) override_msg_value="${OPTARG}" ;;
    u) override_measure_unit="${OPTARG}" ;;
    r) override_retries_max="${OPTARG}" ;;
    c) override_color="y" ;;
    v) override_quiet="n" ;;
    h|?) _set_overrides && \
         _usage \
           0 ;;
    *) _msg_error \
         "Invalid argument '${arg}'" \
         0 && \
       _usage \
         1 ;;
  esac
done
shift \
  $(( \
    OPTIND - 1 ))
if (( $# < 1 )); then
  _msg_error \
    "no address given" \
    0
  _set_overrides
  _usage \
    1
fi
if (( $# < 2 )); then
  _msg_error \
    "no method given" \
    0
  _set_overrides
  _usage \
    1
fi
if (( 0 < $# )); then
  _set \
    "contract" \
    "address" \
    "${1}"
fi
if (( 1 < $# )); then
  _set \
    "contract" \
    "method" \
    "${2}"
fi
shift \
  2
method_args=(
  "$@"
)
_set_overrides
_show_config
app_opts=(
  "$( \
    _get \
      "call" \
      "type")"
  "$( \
    _get \
      "wallet" \
      "name")"
  "$( \
    _get \
      "wallet" \
      "path")"
  "$( \
    _get \
      "wallet" \
      "password")"
  "$( \
    _get \
      "wallet" \
      "seed")"
  "$( \
    _get \
      "api" \
      "key")"
  "$( \
    _get \
      "msg" \
      "value")"
  "$( \
    _get \
      "measure" \
      "unit")"
  "$( \
    _get \
      "retries" \
      "max")"
  "$( \
    _get \
      "target" \
      "network")"
  "$( \
    _get \
      "contract" \
      "address")"
  "$( \
    _get \
      "contract" \
      "abi")"
  "$( \
    _get \
      "contract" \
      "bytecode")"
  "$( \
    _get \
      "contract_compiler" \
      "output")"
  "$( \
    _get \
      "contract" \
      "method")"
  "${method_args[@]}"
)
_evm_contract_call \
  "${app_opts[@]}"

# vim:set sw=2 sts=-1 et:
