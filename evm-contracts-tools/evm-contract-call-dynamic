#!/usr/bin/env node

//
// SPDX-License-Identifier: AGPL-3.0-or-later
//

const
  _libcrash =
    require(
      '../libcrash-js/crash-js');
_dirname =
  _libcrash._dirname;
_msg_info =
  _libcrash._msg_info;
_msg_error =
  _libcrash._msg_error;
_path_join =
  _libcrash._path_join;
const
  { ethers } =
    require(
      "ethers");
_ethers =
  ethers;
_wei_to_ether =
  _ethers.formatEther;
_parse_units =
  _ethers.parseUnits;
const
  _contract_get_module =
    require(
      './contract-get');
_contract_get =
  _contract_get_module._contract_get;


function
  _global_variables() {
  app_name =
    "evm-contract-call-dynamic";
  wallet_seed =
    "";
  wallet_password =
    "";
  api_key_path =
    "";
  msg_value =
    "";
  measure_unit =
    "";
  target_network =
    "";
  contract_address =
    "";
  contract_abi_path =
    "";
  contract_bytecode_path =
    "";
  contract_compiler_output_path =
    "";
  contract_method =
    "";
  method_args =
    [];
  quiet =
    "";
}


function
  _msg_info_wallet_selected(
    _wallet_path) {
  let
    _msg,
    _template;
  _template =
    "selecting '{_wallet_path}'";
  _msg =
    _template.replaceAll(
      "{_wallet_path}",
      _wallet_path);
  _msg_info(
    _msg);
}

function
  _error_handle(
    error) {
  let
    _message;
  if ('error' in error) {
    _message =
      error['error']['message'];
  }
  else if ('shortMessage' in error) {
    _message =
      error['shortMessage'];
  }
  _msg_error(
    _message,
    1);
}

function
  _ethers_to_wei(
    _amount) {
  return _parse_units(
    _amount,
    "ether");
}

async function
  _contract_call_dynamic(
    _wallet_seed,
    _wallet_password,
    _api_key_path,
    _msg_value,
    _measure_unit,
    _target_network,
    _contract_address,
    _contract_abi_path,
    _contract_bytecode_path,
    _contract_compiler_output_path,
    _contract_method,
    _method_args) {
  let
    _amount,
    _contract,
    _contract_get_opts,
    _method,
    _send_opts,
    _value;
  _contract_get_opts = [
    _wallet_seed,
    _wallet_password,
    _contract_address,
    _contract_abi_path,
    _contract_bytecode_path,
    _contract_compiler_output_path,
    _target_network,
    _api_key_path,
  ];
  _contract =
    await _contract_get.apply(
      null,
      _contract_get_opts);
  _method =
    await _contract.getFunction(
      _contract_method);
  if ( _msg_value > 0 ) {
    if ( _measure_unit == "ether" ) {
      _amount =
        _ethers_to_wei(
          _msg_value);
    }
    _send_opts = {
      "value": _msg_value
    };
    _method_args.push(
      _send_opts);
  }
  try {
    _value =
      await _method.send.apply(
        null,
        _method_args)
  } catch (error) {
    _error_handle(
      error)
  };
  return _value;
}

async function
  _contract_run(
    _wallet_seed,
    _wallet_password,
    _api_key_path,
    _msg_value,
    _measure_unit,
    _target_network,
    _contract_address,
    _contract_abi_path,
    _contract_bytecode_path,
    _contract_compiler_output_path,
    _contract_method,
    _method_args) {
  let
    _tx,
    _contract_call_dynamic_opts,
    _wallet_path_list,
    _wallet_path;
  if ( _msg_value == "" ) {
    _msg_info(
      "setting transaction value '0'");
    _msg_value =
      0;
  }
  if ( _measure_unit == "" ) {
    _msg_info(
      "setting measure unit to 'ether'");
    _measure_unit =
      "ether";
  }
  if ( _wallet_password == "" ) {
    _msg_info(
      "wallet without password");
  }
  _wallet_path =
    "";
  if ( _wallet_path == "" ) {
    _wallet_path_list = [
      _dirname(
        _wallet_seed),
      "wallet.dat"];
    _wallet_path =
      _path_join(
        _wallet_path_list);
      _msg_info_wallet_selected(
        _wallet_path);
  }
  _contract_call_dynamic_opts = [
    _wallet_seed,
    _wallet_password,
    _api_key_path,
    _msg_value,
    _measure_unit,
    _target_network,
    _contract_address,
    _contract_abi_path,
    _contract_bytecode_path,
    _contract_compiler_output_path,
    _contract_method,
    _method_args
  ];
  _tx =
    await _contract_call_dynamic.apply(
      null,
      _contract_call_dynamic_opts);
  if ( _tx != "" ) {
    if ( _tx.hash != "" ) {
      _msg_info(
        _tx);
      _msg_info(
        "transaction sent");
    }
  }
  return _tx;
}

function
  _overrides_set() {
  if ( msg_value == "" ) {
    msg_value =
      0;
  }
  if ( measure_unit == "" ) {
    measure_unit =
      "ether";
  }
}

function
  _usage() {
  let
    _text;
  _text = [
    "Execute a dynamic call to an EVM network's contract method",
    "",
    "Usage:",
    "  evm-contract-call-dynamic",
    "    <quiet>",
    "    <wallet_seed>",
    "    <wallet_password>",
    "    <api_key_path>",
    "    <msg_value>",
    "    <measure_unit>",
    "    <target_network>",
    "    <contract_address>",
    "    <contract_abi_path>",
    "    <contract_bytecode_path>",
    "    <contract_compiler_output_path>",
    "    <contract_method>",
    "    [method_args]",
    "",
    "Args:",
    "  <quiet>                          Can be 'y' or 'n'",
    "                                   Default: y",
    "  <wallet_seed>                    Path of the file containing",
    "                                   the seed phrase.",
    "  <wallet_password>                Password of the wallet.",
    "  <api_key_path>                   Path of the API key for the",
    "                                   contract ABI provider service.",
    "  <target_network>                 Network on which the contract",
    "                                   resides.",
    "  <msg_value>                      How much <measure_unit> attach",
    "                                   transaction.",
    "                                   Default: 0",
    "  <measure_unit>                   Measure unit for the transaction",
    "                                   value. It can be 'wei' or 'ether'",
    "                                   Default: ether",
    "  <contract_address>               Address of the contract.",
    "  <contract_abi_path>              Contract ABI path.",
    "  <contract_bytecode_path>         Path for the contract bytecode.",
    "  <contract_compiler_output_path>  Path for the contract compiler",
    "                                   output path (the hardhat artifact).",
    "  <contract_method>                Contract method to execute.",
    "  [method_args]                    Arguments to pass to the method.",
    "",
    "  Options:",
    "    -h (--help)                    This help."
  ]
  for (let
         _line =
	   0;
       _line < _text.length;
       _line++) {
    _msg_info(
      _msgs[_line]);
  }
  process.exit();
}

function
  _config_show() {
  let
    _line,
    _method_args,
    _text;
  _text =
    [];
  _text.push(
    "             Wallet seed: {wallet_seed}".replace(
      "{wallet_seed}",
      wallet_seed));
  _text.push(
    "         Wallet password: {wallet_password}".replace(
      "{wallet_password}",
      wallet_password));
  _text.push(
    "            API Key path: {api_key_path}".replace(
      "{api_key_path}",
      api_key_path));
  _text.push(
    "       Transaction value: {msg_value}".replace(
      "{msg_value}",
      msg_value));
  _text.push(
    "            Measure unit: {measure_unit}".replace(
      "{measure_unit}",
      measure_unit));
  _text.push(
    "          Target network: {target_network}".replace(
      "{target_network}",
      target_network));
  _text.push(
    "        Contract address: {contract_address}".replace(
      "{contract_address}",
      contract_address));
  _text.push(
    "            Contract ABI: {contract_abi_path}".replace(
      "{contract_abi_path}",
      contract_abi_path));
  _text.push(
    "       Contract Bytecode: {contract_bytecode_path}".replace(
      "{contract_bytecode_path}",
      contract_bytecode_path));
  _text.push(
    "Contract compiler output: {contract_compiler_output_path}".replace(
      "{contract_compiler_output_path}",
      contract_compiler_output_path));
  _text.push(
    "         Contract method: {contract_method}".replace(
      "{contract_method}",
      contract_method));
  _method_args =
    method_args.join(
    " ");
  _text.push(
    "             Method args: {method_args}".replace(
      "{method_args}",
      _method_args));
  for (_line of _text)  { 
    _msg_info(
      _line);
  }
}

function
  _cmdline_parse() {
  quiet =
    "y";
  process.argv.forEach(
    function (
      _value,
      _index,
      _array) {
      if ( _index == 2 ) {
        quiet =
          _value;
      }
      if ( _index == 3 ) {
        wallet_seed =
          _value;
      }
      if ( _index == 4 ) {
        wallet_password =
          _value;
      }
      if ( _index == 5 ) {
        api_key_path =
          _value;
      }
      if ( _index == 6 ) {
        msg_value =
          _value;
      }
      if ( _index == 7 ) {
        measure_unit =
          _value;
      }
      if ( _index == 8 ) {
        target_network =
          _value;
      }
      if ( _index == 9 ) {
        contract_address =
          _value;
      }
      if ( _index == 10 ) {
        contract_abi_path =
          _value;
      }
      if ( _index == 11 ) {
        contract_bytecode_path =
          _value;
      }
      if ( _index == 12 ) {
        contract_compiler_output_path =
          _value;
      }
      if ( _index == 13 ) {
        contract_method =
          _value;
      }
      if ( 13 < _index ) {
        method_args.push(
	  _value);
      }
      if ( _value == "-h" ||
           _value == "--help" ) {
        _usage();
      }
  });
  if ( contract_address == "" ) {
    _usage();
  }
}

_global_variables();

if ( require.main == module ) {
  _cmdline_parse();
  _config_show();
  _overrides_set();
  app_opts = [
    wallet_seed,
    wallet_password,
    api_key_path,
    msg_value,
    measure_unit,
    target_network,
    contract_address,
    contract_abi_path,
    contract_bytecode_path,
    contract_compiler_output_path,
    contract_method,
    method_args
  ];
  _contract_run.apply(
    null,
    app_opts);
}

module.exports = {
  _contract_call_dynamic:
    _contract_call_dynamic,
  _contract_run:
    _contract_run
};
