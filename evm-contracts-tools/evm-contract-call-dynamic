#!/usr/bin/env node

// SPDX-License-Identifier: AGPL-3.0-or-later

//    ----------------------------------------------------------------------
//    Copyright Â© 2024, 2025  Pellegrino Prevete
//
//    All rights reserved
//    ----------------------------------------------------------------------
//
//    This program is free software: you can redistribute it and/or modify
//    it under the terms of the GNU Affero General Public License as published by
//    the Free Software Foundation, either version 3 of the License, or
//    (at your option) any later version.
//
//    This program is distributed in the hope that it will be useful,
//    but WITHOUT ANY WARRANTY; without even the implied warranty of
//    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//    GNU Affero General Public License for more details.
//
//    You should have received a copy of the GNU Affero General Public License
//    along with this program.  If not, see <https://www.gnu.org/licenses/>.

const
  _libcrash =
    require(
      '../libcrash-js/crash-js');
_cmdline_check =
  _libcrash._cmdline_check;
_dirname =
  _libcrash._dirname;
_msg_info =
  _libcrash._msg_info;
_msg_error =
  _libcrash._msg_error;
_path_join =
  _libcrash._path_join;
const
  { ethers } =
    require(
      "ethers");
_ethers =
  ethers;
_wei_to_ether =
  _ethers.formatEther;
_parse_units =
  _ethers.parseUnits;
const
  _contract_get_module =
    require(
      './contract-get');
_contract_get =
  _contract_get_module._contract_get;


function
  _global_variables() {
  app_name =
    "evm-contract-call-dynamic";
  retries_max =
    "";
  call_timeout =
    "";
  wallet_seed =
    "";
  wallet_password =
    "";
  api_key_path =
    "";
  msg_value =
    "";
  measure_unit =
    "";
  target_network =
    "";
  contract_address =
    "";
  contract_abi_path =
    "";
  contract_bytecode_path =
    "";
  contract_compiler_output_path =
    "";
  contract_method =
    "";
  method_args =
    [];
  quiet =
    "";
}

function
  _msg_info_wallet_selected(
    _wallet_path) {
  let
    _msg,
    _template;
  _template =
    "Selecting '{_wallet_path}'.";
  _msg =
    _template.replaceAll(
      "{_wallet_path}",
      _wallet_path);
  _msg_info(
    _msg);
}

async function
  _msg_info_contract_obtained(
    _contract) {
  let
    _msg,
    _template;
  _template =
    "Contract object '{_contract}' obtained.";
  _msg =
    _template.replaceAll(
      "{_contract}",
      _contract);
  _msg_info(
    _msg);
}

function
  _msg_info_method_obtained(
    _method) {
  let
    _msg;
  _msg =
    "Method obtained.";
  _msg_info(
    _msg);
}

function
  _msg_error_transaction_undefined(
    _attempt) {
  let
    _msg,
    _template;
  _template =
    "Transaction undefined at attempt '{_attempt}'.";
  _msg =
    _template.replaceAll(
      "{_attempt}",
      _attempt);
  _msg_info(
    _msg);
  _msg_error(
    _msg,
    0);
}

function
  _msg_error_transaction_failed(
    _attempt) {
  let
    _msg,
    _template;
  _template =
    "Transaction failed at attempt '{_attempt}'.";
  _msg =
    _template.replaceAll(
      "{_attempt}",
      _attempt);
  _msg_error(
    _msg,
    0);
}

function
  _delay(
    _time) {
  return new Promise(resolve => setTimeout(resolve, _time));
}


function
  _error_handle(
    _error) {
  let
    _msg;
  if ( _error == undefined ) {
    _msg =
      "Error undefined."
  }
  else if ( 'error' in _error && 
       _error['error'] != undefined &&
       'message' in _error['error'] ) {
    _msg =
      _error['error']['message'];
  }
  else if ( 'shortMessage' in _error ) {
    _msg =
      _error['shortMessage'];
  }
  else {
    _msg =
      "Unknown error.";
    console.error(
      _error);
  }
  _msg_error(
    _msg,
    0);
}

function
  _ethers_to_wei(
    _amount) {
  return _parse_units(
    _amount,
    "ether");
}

async function
  _contract_call_dynamic(
    _call_timeout,
    _wallet_seed,
    _wallet_password,
    _api_key_path,
    _msg_value,
    _measure_unit,
    _target_network,
    _contract_address,
    _contract_abi_path,
    _contract_bytecode_path,
    _contract_compiler_output_path,
    _contract_method,
    _method_args) {
  let
    _amount,
    _contract,
    _contract_get_opts,
    _method,
    _send_opts,
    _receipt,
    _tx;
  if ( _call_timeout == "" ) {
    _msg_info(
      "Setting timeout to '300' seconds.");
    _call_timeout =
      300;
  }
  else {
    _call_timeout =
      Number(
        _call_timeout);
  }
  _contract_get_opts = [
    _wallet_seed,
    _wallet_password,
    _contract_address,
    _contract_abi_path,
    _contract_bytecode_path,
    _contract_compiler_output_path,
    _target_network,
    _api_key_path,
  ];
  try {
    _contract =
      await _contract_get.apply(
        null,
        _contract_get_opts);
    await _msg_info_contract_obtained(
      _contract);
    _method =
      await _contract.getFunction(
        _contract_method);
    _msg_info_method_obtained(
      _method);
    if ( _msg_value > 0 ) {
      if ( _measure_unit == "ether" ) {
        _amount =
          _ethers_to_wei(
            _msg_value);
      }
      _send_opts = {
        "value":
          _msg_value
      };
      _method_args.push(
        _send_opts);
    }
    _tx =
      await _method.send.apply(
        null,
        _method_args)
    if ( _tx == undefined ) {
      throw "Transaction response undefined."
    }
    _receipt =
      await _tx.wait(
        1,
        _call_timeout);
  } catch (error) {
    _msg_info(
      "Dynamic contract call crashed.");
    _error_handle(
      error)
    throw error;
  };
  return _receipt;
}

async function
  _contract_run(
    _retries_max,
    _call_timeout,
    _wallet_seed,
    _wallet_password,
    _api_key_path,
    _msg_value,
    _measure_unit,
    _target_network,
    _contract_address,
    _contract_abi_path,
    _contract_bytecode_path,
    _contract_compiler_output_path,
    _contract_method,
    _method_args) {
  let
    _tx,
    _contract_call_dynamic_opts,
    _wallet_path_list,
    _wallet_path;
  if ( _retries_max == "" ) {
    _msg_info(
      "Setting maximum call retries to '100'.");
    _retries_max =
      100;
  }
  if ( _call_timeout == "" ) {
    _msg_info(
      "Setting timeout to '300' seconds.");
    _call_timeout =
      300;
  }
  _call_timeout =
    Number(
      _call_timeout);
  if ( _msg_value == "" ) {
    _msg_info(
      "Setting transaction value '0'.");
    _msg_value =
      0;
  }
  if ( _measure_unit == "" ) {
    _msg_info(
      "Setting measure unit to 'ether'.");
    _measure_unit =
      "ether";
  }
  if ( _wallet_password == "" ) {
    _msg_info(
      "Wallet without password.");
  }
  _wallet_path =
    "";
  if ( _wallet_path == "" ) {
    _wallet_path_list = [
      _dirname(
        _wallet_seed),
      "wallet.dat"];
    _wallet_path =
      _path_join(
        _wallet_path_list);
      _msg_info_wallet_selected(
        _wallet_path);
  }
  _contract_call_dynamic_opts = [
    _call_timeout,
    _wallet_seed,
    _wallet_password,
    _api_key_path,
    _msg_value,
    _measure_unit,
    _target_network,
    _contract_address,
    _contract_abi_path,
    _contract_bytecode_path,
    _contract_compiler_output_path,
    _contract_method,
    _method_args
  ];
  _attempt =
    1;
  while ( _attempt <= _retries_max ) {
    try {
      _tx =
        await _contract_call_dynamic.apply(
          null,
          _contract_call_dynamic_opts);
      if ( _tx == undefined ) {
        _msg_error_transaction_undefined(
          _attempt);
        _msg_info(
          "Waiting 3 seconds before retrying.");
        await _delay(
          3000);
        _attempt =
          _attempt + 1;
      }
      else if ( _tx != undefined ) {
        console.log(
          _tx);
        if ( _tx.hash != undefined ) {
          _msg_info(
            "Transaction sent.");
          break;
        }
        else if ( _tx.hash == undefined ) {
        _msg_error_transaction_failed(
          _attempt);
        _msg_info(
          "Waiting 3 seconds before retrying.");
        await _delay(
          3000);
          _attempt =
            _attempt + 1;
        }
        else {
        _msg_error_transaction_failed(
          _attempt);
        _msg_error(
          "Unknown transaction error.",
          0);
        _msg_info(
          "Waiting 3 seconds before retrying.");
        await _delay(
          3000);
          _attempt =
            _attempt + 1;
        }
      }
    } catch (e) {
      _error_handle(
        e);
      _msg_info(
        "Waiting 3 seconds before retrying.");
      await _delay(
        3000);
        _attempt =
          _attempt + 1;
    }
  }
  if ( _attempt > _retries_max ) {
    throw "Maximum number of retries reached.";
  }
  return _tx;
}

function
  _overrides_set() {
  if ( retries_max == "" ) {
    retries_max =
      100;
  }
  if ( call_timeout == "" ) {
    call_timeout =
      300;
  }
  if ( msg_value == "" ) {
    msg_value =
      0;
  }
  if ( measure_unit == "" ) {
    measure_unit =
      "ether";
  }
}

function
  _usage(
    _exit_code) {
  let
    _text;
  _text = [
    "Execute a dynamic call to an EVM network's contract method",
    "",
    "Usage:",
    "  evm-contract-call-dynamic",
    "    <quiet>",
    "    <retries_max>",
    "    <call_timeout>",
    "    <wallet_seed>",
    "    <wallet_password>",
    "    <api_key_path>",
    "    <msg_value>",
    "    <measure_unit>",
    "    <target_network>",
    "    <contract_address>",
    "    <contract_abi_path>",
    "    <contract_bytecode_path>",
    "    <contract_compiler_output_path>",
    "    <contract_method>",
    "    [method_args]",
    "",
    "Args:",
    "  <quiet>                          Can be 'y' or 'n'",
    "                                   Default: y",
    "  <retries_max>                    Maximum number of retries before",
    "                                   failing.",
    "  <call_timeout>                   How much seconds to wait for a return",
    "                                   before declaring the call failed.",
    "  <wallet_seed>                    Path of the file containing",
    "                                   the seed phrase.",
    "  <wallet_password>                Password of the wallet.",
    "  <api_key_path>                   Path of the API key for the",
    "                                   contract ABI provider service.",
    "  <target_network>                 Network on which the contract",
    "                                   resides.",
    "  <msg_value>                      How much <measure_unit> attach",
    "                                   transaction.",
    "                                   Default: 0",
    "  <measure_unit>                   Measure unit for the transaction",
    "                                   value. It can be 'wei' or 'ether'",
    "                                   Default: ether",
    "  <contract_address>               Address of the contract.",
    "  <contract_abi_path>              Contract ABI path.",
    "  <contract_bytecode_path>         Path for the contract bytecode.",
    "  <contract_compiler_output_path>  Path for the contract compiler",
    "                                   output path (the hardhat artifact).",
    "  <contract_method>                Contract method to execute.",
    "  [method_args]                    Arguments to pass to the method.",
    "",
    "  Options:",
    "    -h (--help)                    This help."
  ]
  for ( let
          _line =
            0;
        _line < _text.length;
        _line++ ) {
    _msg_info(
      _msgs[
        _line]);
  }
  process.exit(
    _exit_code);
}

function
  _config_show() {
  let
    _line,
    _method_args,
    _text;
  _text =
    [];
  _text.push(
    "Dynamic call configuration:");
  _text.push(
    "             Max retries: {retries_max}".replace(
      "{retries_max}",
      retries_max));
  _text.push(
    "            Call timeout: {call_timeout}".replace(
      "{call_timeout}",
      call_timeout));
  _text.push(
    "             Wallet seed: {wallet_seed}".replace(
      "{wallet_seed}",
      wallet_seed));
  _text.push(
    "         Wallet password: {wallet_password}".replace(
      "{wallet_password}",
      wallet_password));
  _text.push(
    "            API Key path: {api_key_path}".replace(
      "{api_key_path}",
      api_key_path));
  _text.push(
    "       Transaction value: {msg_value}".replace(
      "{msg_value}",
      msg_value));
  _text.push(
    "            Measure unit: {measure_unit}".replace(
      "{measure_unit}",
      measure_unit));
  _text.push(
    "          Target network: {target_network}".replace(
      "{target_network}",
      target_network));
  _text.push(
    "        Contract address: {contract_address}".replace(
      "{contract_address}",
      contract_address));
  _text.push(
    "            Contract ABI: {contract_abi_path}".replace(
      "{contract_abi_path}",
      contract_abi_path));
  _text.push(
    "       Contract Bytecode: {contract_bytecode_path}".replace(
      "{contract_bytecode_path}",
      contract_bytecode_path));
  _text.push(
    "Contract compiler output: {contract_compiler_output_path}".replace(
      "{contract_compiler_output_path}",
      contract_compiler_output_path));
  _text.push(
    "         Contract method: {contract_method}".replace(
      "{contract_method}",
      contract_method));
  _method_args =
    method_args.join(
    " ");
  _text.push(
    "             Method args: {method_args}".replace(
      "{method_args}",
      _method_args));
  for (_line of _text)  { 
    _msg_info(
      _line);
  }
}

function
  _cmdline_parse() {
  quiet =
    "y";
  process.argv.forEach(
    function (
      _value,
      _index,
      _array) {
      if ( _index == 2 ) {
        quiet =
          _value;
      }
      if ( _index == 3 ) {
        retries_max =
          _value;
      }
      if ( _index == 4 ) {
        call_timeout =
          _value;
      }
      if ( _index == 5 ) {
        wallet_seed =
          _value;
      }
      if ( _index == 6 ) {
        wallet_password =
          _value;
      }
      if ( _index == 7 ) {
        api_key_path =
          _value;
      }
      if ( _index == 8 ) {
        msg_value =
          _value;
      }
      if ( _index == 9 ) {
        measure_unit =
          _value;
      }
      if ( _index == 10 ) {
        target_network =
          _value;
      }
      if ( _index == 11 ) {
        contract_address =
          _value;
      }
      if ( _index == 12 ) {
        contract_abi_path =
          _value;
      }
      if ( _index == 13 ) {
        contract_bytecode_path =
          _value;
      }
      if ( _index == 14 ) {
        contract_compiler_output_path =
          _value;
      }
      if ( _index == 15 ) {
        contract_method =
          _value;
      }
      if ( 15 < _index ) {
        method_args.push(
	  _value);
      }
      if ( _value == "-h" ||
           _value == "--help" ) {
        quiet =
          "n";
        _usage(
          0);
      }
  });
  if ( contract_address == "" ) {
    quiet =
      "n";
    _usage(
      1);
  }
}

if ( _cmdline_check(
       "evm-contract-call-dynamic") ) {
  _global_variables();
  _cmdline_parse();
  _config_show();
  _overrides_set();
  app_opts = [
    retries_max,
    call_timeout,
    wallet_seed,
    wallet_password,
    api_key_path,
    msg_value,
    measure_unit,
    target_network,
    contract_address,
    contract_abi_path,
    contract_bytecode_path,
    contract_compiler_output_path,
    contract_method,
    method_args
  ];
  _contract_run.apply(
    null,
    app_opts);
}

module.exports = {
  _contract_call_dynamic:
    _contract_call_dynamic,
  _contract_run:
    _contract_run
};
