#!/usr/bin/env node

//
// SPDX-License-Identifier: AGPL-3.0-or-later
//

const { ethers } = require(
  "ethers");
_ethers = ethers;
const _libcrash = require(
  '../libcrash-js/crash-js');
_app_name_get = _libcrash._app_name_get;
_dirname = _libcrash._dirname;
_file_read = _libcrash._file_read;
_msg_info = _libcrash._msg_info;
_msg_error = _libcrash._msg_error;
const _wallet_get = require(
  '../evm-wallet/wallet-get');
const _network_provider = require(
  '../evm-wallet/network-provider');

function _global_variables() {
  method_args = [];
  wallet_seed = "";
  wallet_password = "";
  contract_address = "";
  contract_method = "";
  contract_abi = "";
  target_network = "";
  api_key = "";
  quiet = "";
}

async function _get(
  _wallet,
  _contract_address,
  _contract_method,
  _contract_abi,
  _contract_bytecode,
  _network_provider,
  _method_args) {
  _contract = _contract_get(
    contract_address,
    _contract_method,
    );
  _contract = new _ethers.BaseContract(
    _contract_address,
    _contract_abi,
    runner=_wallet
    // runner=_network_provider
  );
  _method = _contract.getFunction(
  _contract_method);
    _value = await _method.send.apply(
    null,
    _method_args);
  return _value;
}

async function _contract_run(
  _wallet_seed,
  _wallet_password,
  _contract_address,
  _contract_method,
  _contract_abi,
  _target_network,
  _api_key_path,
  _method_args) {
  _wallet_path = [
    _dirname(
      _wallet_seed),
    "wallet.dat"].join("/");
  _api_key = _file_read(
    _api_key_path);
  // _contract_abi = _file_read(
  //   _contract_abi_path);
  _provider = _network_provider._provider_get(
    _target_network,
    _api_key);
  _msg = "provider {_provider} generated".replace(
    "{_provider}",
    _provider);
  _msg_info(
    _msg);
  _wallet_get_opts=[
    _wallet_path,
    _wallet_password,
    _wallet_seed,
    _provider
  ];
  _tx = await _set(
    _wallet,
    _contract_address,
    _contract_method,
    _contract_abi,
    _provider,
    _method_args);
  if ( _tx.hash != "" ) {
    _msg_info(
      _value);
    _msg_info(
      "transaction sent");
  }
}

function _config_show() {
  _msg = "      Wallet seed: {wallet_seed}".replace(
    "{wallet_seed}",
    wallet_seed);
  _msg_info(
    _msg);
  _msg = "  Wallet password: {wallet_password}".replace(
    "{wallet_passward}",
    wallet_password);
  _msg_info(
    _msg);
  _msg = " Contract address: {contract_address}".replace(
      "{contract_address}",
      contract_address);
  _msg_info(
    _msg);
  _msg = "  Contract method: {contract_method}".replace(
    "{contract_method}",
      contract_method);
  _msg_info(
    _msg);
  // _msg = "     Contract ABI: {contract_abi}".replace(
  //   "{contract_abi}",
  //   contract_abi));
  //  _msg_info(
  //    _msg);
  _msg = "   Target network: {target_network}".replace(
    "{target_network}",
    target_network);
  _msg_info(
    _msg);
  _msg = "          API Key: {api_key}".replace(
    "{api_key}",
    api_key);
  _msg_info(
    _msg);
  _method_args = method_args.join(
    " ");
  _msg = "      Method args: {method_args}".replace(
    "{method_args}",
    _method_args);
  _msg_info(
    _msg);
}

function _cmdline_parse() {
  quiet = "y";
  process.argv.forEach(
    function (
      _value,
      _index,
      _array) {
      if ( _index == 2 ) {
        quiet = _value;
      }
      if ( _index == 3 ) {
        wallet_seed = _value;
      }
      if ( _index == 4 ) {
        wallet_password = _value;
      }
      if ( _index == 5 ) {
        contract_address = _value;
      }
      if ( _index == 6 ) {
        contract_method = _value;
      }
      if ( _index == 7 ) {
        contract_abi = _value;
      }
      if ( _index == 8 ) {
        target_network = _value;
      }
      if ( _index == 9 ) {
        api_key = _value;
      }
      if ( 9 < _index ) {
        method_args.push(
	  _value);
      }
  });
  if ( contract_address == "" ) {
    _msg = [
      "Usage:",
      "  {app_name}".replace(
        "{app_name}",
        app_name),
      "    <quiet>",
      "    <wallet_seed>",
      "    <wallet_password>",
      "    <contract_address>",
      "    <contract_method>",
      "    <target_network>",
      "    <api_key>"
    ]
    for (let _line = 0; _line < _msg.length; _line++) {
      _msg_error(
        _msg[_line],
        0);
    }
    process.exit();
  }
}

_global_variables();
app_name = _app_name_get();
_cmdline_parse();
_config_show();
_contract_run(
  wallet_seed,
  wallet_password,
  contract_address,
  contract_method,
  contract_abi,
  target_network,
  api_key,
  method_args);
