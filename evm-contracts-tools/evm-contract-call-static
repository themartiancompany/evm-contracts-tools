#!/usr/bin/env node

const { ethers } = require(
  "ethers");
_ethers = ethers;
const _libcrash = require(
  '../libcrash-js/crash-js');
const _contract_get_module = require(
  './contract-get');
_contract_get = _contract_get_module._contract_get
_msg_info = _libcrash._msg_info
_msg_error = _libcrash._msg_error
const _network_provider = require(
  '../evm-wallet/network-provider');

async function _get(
  _api_key_path,
  _target_network,
  _contract_address,
  _contract_abi,
  _contract_bytecode_path,
  _contract_method,
  _method_args) {
  _wallet_seed=""
  _wallet_password=""
  _contract_get_opts=[
    _wallet_seed,
    _wallet_password,
    _api_key_path,
    _target_network,
    _contract_address,
    _contract_abi,
    _contract_bytecode_path);
  ];
  _contract = await _contract_get.apply(
    null,
    _contract_key_opts);
  _method = _contract.getFunction(
    _contract_method);
  _value = await _method.staticCall.apply(
    null,
    _method_args);
  return _value;
}

async function _contract_run(
  _api_key_path,
  _target_network,
  _contract_address,
  _contract_abi,
  _contract_method,
  _method_args) {
  _value = await _get(
    _api_key_path,
    _target_network,
    _contract_address,
    _contract_abi,
    _contract_bytecode_path,
    _contract_method,
    _method_args);
  console.log(
    _value);
}

_usage() {
  _msgs = [
    "Usage:",
    "  evm-contract-call-static",
    "    <api_key_path>",
    "    <target_network>",
    "    <contract_address>",
    "    <contract_abi>",
    "    <contract_bytecode_path>",
    "    <contract_method>",
    "    <method_args>"];
  for (_msg in _msgs) {
  _msg_info(
    _msg);
  }
}

function _cmdline_parse() {
  process.argv.forEach(
    function (
      _value,
      _index,
      _array) {
      if ( _index == 2 ) {
        api_key_path = _value;
      }
      if ( _index == 3 ) {
        target_network = _value;
      }
      if ( _index == 4 ) {
        contract_address = _value;
      }
      if ( _index == 5 ) {
        contract_abi = _value;
      }
      if ( _index == 6 ) {
        contract_bytecode_path = _value;
      }
      if ( _index == 7 ) {
        contract_method = _value;
      }
      if ( 7 < _index ) {
        method_args.push(
	  _value);
      }
      if ( _value == "-h" || _value == "--help" ) {
        _usage();
      }
  });
}

method_args=[];
_cmdline_parse();
_contract_run(
  api_key_path,
  target_network,
  contract_address,
  contract_abi,
  contract_bytecode_path,
  contract_method,
  method_args);
