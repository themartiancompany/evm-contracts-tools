#!/usr/bin/env node

const { ethers } = require("ethers");
_ethers = ethers;

async function _get(
  _contract_address,
  _contract_method,
  _contract_abi,
  _network_provider,
  _method_args) {
  _contract = new _ethers.BaseContract(
    _contract_address,
    _contract_abi,
    runner=_network_provider);
    _method = _contract.getFunction(
      _contract_method);
    _value = await _method.staticCall.apply(null, _method_args);
  return _value;
}

function _get_provider(
  _network,
  _api_key) {
  _provider_opts = {};
  if ( _network == "gnosis" ) {
    _rpc = "https://rpc.gnosischain.com" ;
    _default_network = _rpc;
  } 
  if ( _network == "ethereum" ) {
    _default_network = "etherscan";
    _provider_opts = {
     'etherscan': _api_key,
      'exclusive': [
        "etherscan",
        "infura"
      ]
    };
  }
  _provider = _ethers.getDefaultProvider(
    _default_network,
    _provider_opts);
  return _provider;
}

async function _contract_run(
  _contract_address,
  _contract_method,
  _contract_abi,
  _target_network,
  _etherscan_key,
  _method_args) {
  _network_provider = _get_provider(
    _target_network,
    _etherscan_key);
  _value = await _get(
    _contract_address,
    _contract_method,
    _contract_abi,
    _network_provider,
    _method_args);
  console.log(
    _value);
}

function _cmdline_parse() {
  process.argv.forEach(
    function (
      _value,
      _index,
      _array) {
      if ( _index == 2 ) {
        contract_address = _value
      }
      if ( _index == 3 ) {
        contract_method = _value
      }
      if ( _index == 4 ) {
        contract_abi = _value
      }
      if ( _index == 5 ) {
        target_network = _value
      }
      if ( _index == 6 ) {
        etherscan_key = _value
      }
      if ( 6 < _index ) {
        method_args.push(
	  _value)
      }
  });
}

method_args=[]
_cmdline_parse();
_contract_run(
  contract_address,
  contract_method,
  contract_abi,
  target_network,
  etherscan_key,
  method_args);
