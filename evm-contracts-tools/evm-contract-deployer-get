#!/usr/bin/env bash

# SPDX-License-Identifier: AGPL-3.0-or-later

#    ----------------------------------------------------------------------
#    Copyright Â© 2024, 2025  Pellegrino Prevete
#
#    All rights reserved
#    ----------------------------------------------------------------------
#
#    This program is free software: you can redistribute it and/or modify
#    it under the terms of the GNU Affero General Public License as published by
#    the Free Software Foundation, either version 3 of the License, or
#    (at your option) any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU Affero General Public License for more details.
#
#    You should have received a copy of the GNU Affero General Public License
#    along with this program.  If not, see <https://www.gnu.org/licenses/>.

_bin="$( \
  dirname \
    "$( \
      command \
        -v \
	  "env")")"
_lib="$( \
  realpath \
    "${_bin}/../lib")"
_crash_bash="${_lib}/libcrash-bash/crash-bash"
_libevm="${_lib}/libevm/libevm"
_sourced \
  "${_crash_bash}" 2>/dev/null || \
  source \
    "${_crash_bash}"
_sourced \
  "${_libevm}"


# shellcheck disable=SC2034
_global_variables() {
  call_date=""
  call_auth=""
  wallet_name=""
  wallet_path=""
  wallet_password=""
  wallet_address=""
  wallet_seed=""
  api_key=""
  target_network=""
  rpc_selection=""
  deployer_verify=""
  contract_address=""
  transaction_deployment=""
  retries_max=""
  color=""
  quiet=""
}

_requirements() {
  _check_cmd \
    'libevm-requirements' \
    'libevm'
  libevm-requirements
  _check_cmd \
    "evm-chains-explorers"
  _check_cmd \
    "evm-chains-info"
  _check_cmd \
    'evm-contracts-abi-get'
  _check_cmd \
    'evm-wallet'
  _check_cmd \
    'node-run'
}

_get_conf_dir_path() {
  local \
    _dir
  _dir="${HOME}/.config/${app_name}"
  echo \
    "${_dir}"
}

_deployer_get() {
  local \
    _lib
  _lib="$( \
    _get_lib)/evm-contracts-tools"
  echo \
    "${_lib}/deployer-get"
}

_deployer_verify() {
  local \
    _lib
  _lib="$( \
    _get_lib)/evm-contracts-tools"
  echo \
    "${_lib}/deployer-verify"
}

_evm_contract_deployer_get() {
  local \
    _call_auth="${1}" \
    _wallet_name="${2}" \
    _wallet_path="${3}" \
    _wallet_password="${4}" \
    _wallet_seed="${5}" \
    _api_key_path="${6}" \
    _retries_max="${7}" \
    _network="${8}" \
    _rpc_selection="${9}" \
    _deployer_verify="${10}" \
    _contract_address="${11}" \
    _transaction_deployment="${12}" \
    _node_run_opts=() \
    _method_args=() \
    _cmd \
    _args=() \
    _rpc_backend \
    _chain_id \
    _chain_name \
    _msg=()
  shift \
    12
  _node_run_opts+=(
    -r
      "${_retries_max}"
  )
  _rpc_backend_get \
    "${_network}" \
    "${_rpc_selection}"
  _cmd="$( \
    _deployer_get)"
  _args+=(
    "${quiet}"
    "${_wallet_seed}"
    "${_retries_max}"
    "${_api_key_path}"
    "${_chain_id}"
    "${_chain_name}"
    "${_rpc_backend}"
    "${_contract_address}"
  )
  if [[ "${deployer_verify}" != "" ]]; then
    _cmd="$( \
      _deployer_verify)"
    _args+=(
      "${deployer_verify}"
    )
  fi
  _args+=(
    "${_transaction_deployment}"
  )
  _msg=(
    "Calling '$(basename "${_cmd}")'"
    "with arguments '${_args[*]}'."
  )
  _msg_info \
    "${_msg[*]}"
  node-run \
    "${_node_run_opts[@]}" \
    "${_cmd}" \
    "${_args[@]}"
}

_wallet_path_get() {
  local \
    _wallet_name="${1}" \
    _path \
    _wallet_address
  _wallet_address="$( \
    evm-wallet \
      get \
        "${_wallet_name}" \
        "address")"
  _path="${HOME}/.config/evm-wallet/${_wallet_name}.dat"
  echo \
    "${_path}"
}

_wallet_password_get() {
  local \
    _wallet_name="${1}" \
    _path
  _path="${HOME}/.config/evm-wallet/${_wallet_name}-password.txt"
  echo \
    "${_path}"
}

_wallet_seed_get() {
  local \
    _wallet_name="${1}" \
    _path
  _path="${HOME}/.config/evm-wallet/${_wallet_name}-seed.txt"
  echo \
    "${_path}"
}

_wallet_address_get() {
  local \
    _wallet_name="${1}" \
    _wallet_address
  _wallet_address="$( \
    evm-wallet \
      get \
        "${_wallet_name}" \
        "address")"
  echo \
    "${_wallet_address}"
}

_api_key_auto_detect() {
  local \
    _chain="${1}" \
    _chain_name \
    _key \
    _msg=()
  _key="$( \
    evm-chains-explorers \
      -c \
        "${_chain}" \
      -s \
        'kirsh' \
      get \
        keys)"
  _chain_name="$( \
    evm-chains-info \
      -o \
        "name" \
      "${_chain}")"
  if [[ ! -e "${_key}" ]]; then
    _msg=(
      "Found no provider services"
      "keys for chain '${_chain_name}'."
      "Check available service"
      "providers with \"evm-chains-info"
      "-o explorers '${_chain}'\""
      "and add the relative api key in"
      "'<user_home>/.config/evm-chains-explorers/<service>/default.txt'"
    )
    _msg_info \
      "${_msg[*]}"
  fi
  _set_override \
    "api" \
    "key" \
    "${_key}"
}

_contract_abi_retrieve() {
  local \
    _evm_contracts_abi_get_opts=() \
    _msg=() \
    _data_dir
  _msg=(
    "no contract ABI or compiler output"
    "available, attempting to obtain it from"
    "a network's contracts ABI provider"
    "at path '${_abi_target}'"
  )
  _msg_info \
    "${_msg[*]}"
  _data_dir="$( \
    dirname \
      "${_abi}")"
  mkdir \
    -p \
    "${_data_dir}"
  chmod \
    700 \
    "${_data_dir}"
  if [[ "${quiet}" == "n" ]]; then
    _evm_contracts_abi_get_opts+=(
      --verbose
    )
  fi
  _evm_contracts_abi_get_opts+=(
    --network
      "${_network}"
    --key 
      "${_key}"
    --output-file
      "${_abi_target}"
  )
  if [ ! -e "${_key}" ]; then
    _msg=(
      "contract ABI provider API"
      "key '${_key}' not found,"
      "fetch the ABI from the"
      "provider may not work."
    )
    _msg_info \
      "${_msg[*]}"
  elif [ -e "${_key}" ]; then
    _evm_contracts_abi_get_opts+=(
      --key 
        "${_key}"
    )
  fi
  evm-contracts-abi-get \
    "${_evm_contracts_abi_get_opts[@]}" \
      "${_address}"
  if [ $? -eq 0 ]; then
    _msg=(
      "obtained ABI from a network explorer,"
      "setting contract ABI value to '${_abi_target}'"
    )
    _msg_info \
      "${_msg[*]}"
    _abi="${_abi_target}"
  else
    _msg=(
      "Couldn't obtain contract ABI"
      "from the provider, blanking contract ABI value."
    )
    _msg_info \
      "${_msg[*]}"
    _abi=""
  fi
}

_contract_abi_auto_detect() {
  local \
    _abi \
    _address \
    _compiler_output \
    _key \
    _network
  _network="$( \
    _get \
      "target" \
      "network")"
  _address="$( \
    _get \
      "contract" \
      "address")"
  _key="$( \
    _get \
      "api" \
      "key")"
  _abi="$( \
    _get \
      "contract" \
      "abi")"
  _compiler_output="$( \
    _get \
      "contract" \
      "compiler_output")"
  _abi_target="${_abi}"
  if [[ "${_abi_target}" == "" ]]; then
     _abi_target="$( \
      _default_artifact_path_get \
        "abi")"
  fi
  if [[ ! -e "${_abi}" ]] && \
     [[ ! -e "${_compiler_output}" ]]; then
    if [[ -e "${_abi_target}" ]]; then
      _abi="${_abi_target}"
    elif [[ ! -e "${_abi_target}" ]]; then
      _contract_abi_retrieve
    fi
  fi
  _set \
    "contract" \
    "abi" \
    "${_abi}"
}

_default_artifact_path_get() {
  local \
    _type="${1}" \
    _address \
    _app \
    _artifact \
    _data_dir \
    _network
  _network="$( \
    _get \
      "target" \
      "network")"
  _address="$( \
    _get \
      "contract" \
      "address")"
  _app="$( \
    _get \
      "app" \
      "name")"
  _data_dir="${HOME}/.local/share/${_app}"
  if [[ "${_type}" == "abi" ]]; then
    _artifact="${_data_dir}/${_network}/${_address}.abi.json"
  elif [[ "${_type}" == "bytecode" ]]; then
    _artifact="${_data_dir}/${_network}/${_address}.bin"
  elif [[ "${_type}" == "compiler_output" ]]; then
    _artifact="${_data_dir}/${_network}/${_address}.json"
  fi
  echo \
    "${_artifact}"
}

_contract_bytecode_auto_detect() {
  local \
    _bytecode
  _bytecode="$( \
    _default_artifact_path_get \
      "bytecode")"
  if [[ ! -e "${_bytecode}" ]]; then
    _bytecode=""
  fi
  _set_override \
    "contract" \
    "bytecode"
    "${_bytecode}"
}

_artifact_local_auto_detect() {
  local \
    _type="${1}" \
    _artifact
  _artifact="$( \
    _default_artifact_path_get \
      "${_type}")"
  _set_override \
    "contract" \
    "${_type}" \
    "${_artifact}"
}

_set_overrides() {
  local \
    _abi \
    _bytecode \
    _compiler_output \
    _data_dir
  if [[ -v override_quiet ]]; then
    quiet="${override_quiet}"
  elif [[ -z "${quiet}" ]]; then
    quiet="y"
  fi
  if [[ -v override_color ]]; then
    color="${override_color}"
  elif [[ -z "${color}" ]]; then
    color="n"
  fi
  _data_dir="${HOME}/.local/share/$(_get "app" "name")"
  _set_override \
    "call" \
    "date" \
    "$(_get_date_human)"
  _set_overrides \
    "call" \
    "auth" \
    "n"
  _set_override \
    "retries" \
    "max" \
    "300"
  _set_override \
    "target" \
    "network" \
    "100"
  _set_override \
    "rpc" \
    "selection" \
    "kirsh"
  _api_key_auto_detect \
    "${target_network}"
  if [[ "${call_auth}" == "y" ]]; then
    _set_override \
      "wallet" \
      "name" \
      "default"
    _set_override \
      "wallet" \
      "path" \
      "$(_wallet_path_get \
           "evm-wallet" \
           "${wallet_name}")"
    _secret_auto_detect \
      "seed" \
      "seed" \
      "evm-wallet" \
      "${wallet_name}"
    _secret_auto_detect \
      "password" \
      "plain" \
      "evm-wallet" \
      "${wallet_name}"
    _set_override \
      "wallet" \
      "address" \
      "$(evm-wallet \
           get \
             "${wallet_name}" \
             "address")"
  elif [[ "${call_auth}" == "n" ]]; then
    _set_override \
      "wallet" \
      "name" \
      ""
    _set_override \
      "wallet" \
      "path" \
      ""
    _set_override \
      "wallet" \
      "seed" \
      ""
    _set_override \
      "wallet" \
      "password" \
      ""
    _set_override \
      "wallet" \
      "address" \
      ""
  fi
  _set_override \
    "deployer" \
    "verify" \
    ""
}

# Show help usage, with an exit status.
# $1: exit status number.
_usage() {
  local \
    _usage_text
  IFS='' \
    read \
      -r \
      -d '' \
      _usage_text << \
        ENDUSAGETEXT || true
Run a smart contract function 

Usage:
  ${app_name}
    [options]
    <contract_address>
    <transaction_deployment>

  networks:
    all those supported by
    'evm-chains-info' as
    well as directly RPC address.

  options:
     -a                     Whether to perform an authenticated
                            call.
                            Default: ${call_auth}
     -N <wallet_name>       EVM wallet name.
                            Default: ${wallet_name}
     -w <wallet_path>       EVM wallet file path.
                            Default: ${wallet_path}
     -p <wallet_path>       EVM wallet password file.
                            Default: ${wallet_password}
     -s <wallet_seed>       EVM wallet seed file.
                            Default: ${wallet_seed}
     -n <network>           EVM network name. Accepted values
                            are all those supported by
                            evm-chains-info and RPC addresses.
                            Default: ${target_network}
     -k <api_key>           Etherscan-like service key.
                            Default: ${api_key}
     -V <deployer_verify>   Whether to verify the input
                            address is the deployer.
                            Default: ${deployer_verify}
     -r <retries_max>       Maximum number of retries before
                            declaring the call failed.
                            Default: ${retries_max}
     -S <rpc_selection>     RPC selection method. It can be
                            'kirsh' or 'random'.
                            Default: ${rpc_selection}

     -h                     This message.
     -c                     Enable color output
     -v                     Enable verbose output
ENDUSAGETEXT
  _printf \
    '%s\n' \
    "${_usage_text}"
  exit \
    "${1}"
}

_display_array() {
  local \
    _array=() \
    _item
  _array+=(
    "$@"
  )
  for _item \
    in "${_array[@]}"; do
  _msg_info \
    "                            ${_item}"
  done
}

# Shows configuration options.
_show_config() {
  _msg_info "${app_name} configuration"
  _msg_info "                Call date:   ${call_date}"
  _msg_info "       Authenticated call:   ${call_auth}"
  _msg_info "              Max retries:   ${retries_max}"
  _msg_info "              Wallet name:   ${wallet_name}"
  _msg_info "              Wallet path:   ${wallet_path}"
  _msg_info "          Wallet password:   ${wallet_password}"
  _msg_info "              Wallet seed:   ${wallet_seed}"
  _msg_info "                  API key:   ${api_key}"
  _msg_info "           Wallet address:   ${wallet_address}"
  _msg_info "           Target network:   ${target_network}"
  _msg_info "     RPC selection method:   ${rpc_selection}"
  _msg_info "          Verify deployer:   ${deployer_verify}"
  _msg_info "         Contract address:   ${contract_address}"
  _msg_info "   Deployment transaction:   ${transaction_deployment}"
}

_globals
_global_variables
_requirements
# shellcheck disable=SC2034
while \
  getopts \
    'aN:w:p:s:n:k:V:r:S:cvh?' \
    arg; do
  case \
    "${arg}" in
    a) override_call_auth="y" ;;
    N) override_wallet_name="${OPTARG}" ;;
    w) override_wallet_path="${OPTARG}" ;;
    p) override_wallet_password="${OPTARG}" ;;
    s) override_wallet_seed="${OPTARG}" ;;
    n) override_target_network="${OPTARG}" ;;
    k) override_api_key="${OPTARG}" ;;
    V) override_deployer_verify="${OPTARG}" ;;
    r) override_retries_max="${OPTARG}" ;;
    S) override_rpc_selection="${OPTARG}" ;;
    c) override_color="y" ;;
    v) override_quiet="n" ;;
    h|?) _set_overrides && \
         _usage \
           0 ;;
    *) _msg_error \
         "Invalid argument '${arg}'" \
         0 && \
       _usage \
         1 ;;
  esac
done
shift \
  $(( \
    OPTIND - 1 ))
if (( $# < 1 )); then
  _msg_error \
    "No contract address given." \
    0
  _set_overrides
  _usage \
    1
fi
if (( $# < 2 )); then
  _msg_error \
    "No deployment transaction given." \
    0
  _set_overrides
  _usage \
    1
fi
if (( 0 < $# )); then
  contract_address="${1}"
fi
if (( 1 < $# )); then
  transaction_deployment="${2}"
fi
shift \
  1
_set_overrides
_show_config
app_opts=(
  "${call_auth}"
  "${wallet_name}"
  "${wallet_path}"
  "${wallet_password}"
  "${wallet_seed}"
  "${api_key}"
  "${retries_max}"
  "${target_network}"
  "${rpc_selection}"
  "${deployer_verify}"
  "${contract_address}"
  "${transaction_deployment}"
)
_evm_contract_deployer_get \
  "${app_opts[@]}"

# vim:set sw=2 sts=-1 et:
