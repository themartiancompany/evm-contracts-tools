#!/usr/bin/env bash
#
# SPDX-License-Identifier: AGPL-3.0-or-later

_bin="$( \
  dirname \
    "$( \
      command \
        -v \
	  "env")")"
_lib="${_bin}/../lib"
source \
  "${_lib}/libcrash-bash/crash-bash"

# shellcheck disable=SC2034
_global_variables() {
  resolve_date=""
  target_network=""
  network_id=""
  target_app=""
  target_contract=""
  contract_version=""
  user_defined=""
  color=""
  quiet=""
}

_requirements() {
  true
}

_contract_address_get() {
  local \
    _deployments="${1}" \
    _network="${2}" \
    _contract="${3}" \
    _version="${3}" \
    _config \
    _address
  _config="${_deployments}/${_contract}/${_network}/config.sh"
  source \
    "${_config}"
  _address="${contract_address["${_version}"]}"
  if [[ "${_address}" == "" ]]; then
    _msg=(
      "no '${_contract}' version '${_version}' contract"
      "deployment specified for network '${_network}'"
      "at path '${_deployments}'"
    )
    _msg_error \
      "${_msg[*]}" \
      1
  fi
}

_network_check() {
  local \
    _target_network="${1}" \
    _target_network_id="${2}" \
    _msg=()
  if [[ "${_target_network}" == "gnosis" ]]; then
    _network_id="100"
  fi
  if [[ "${_target_network_id}" != "" ]]; then
    if [[ "${_target_network_id}" != "${_network_id}" ]]; then
    _msg=(
      "requested target network ID"
      "'${_target_network_id}' does"
      "not correspond to '${_target_network}'"
      "known ID '${_network_id}'"
    )
    _msg_error \
      "${_msg[*]}" \
      1
    fi
  fi
}

_user_deployments_init() {
  local \
    _app="${1}"
  mkdir \
    -p \
    "${_deployments_path}"
  chmod \
    700 \
    "${_deployments_path}"
  cp \
    -r \
    "$(_default_deployments_path_get \
         "${_app}" \
         "system")/"* \
    "${_deployments_path}"
}

_user_deployments_check() {
  local \
    _app="${1}"
  if [[ ! -e "${_deployments_path}" ]]; then
    _user_deployments_init \
      "${_app}"
  fi
}

_evm_contract_deployment_address() {
  local \
    _target_network="${1}" \
    _target_network_id="${2}" \
    _target_app="${3}" \
    _target_contract="${4}" \
    _contract_version="${5}" \
    _user_defined="${6}" \
    _deployments_path="${7}" \
    _system_deployments_path \
    _user_deployments_path \
    _network_id \
    _contract_address \
    _args=() \
    _msg=()
  shift \
    7
  _args+=(
    "$@"
  )
  _network_check \
    "${_target_network}" \
    "${_target_network_id}"
  if [[ "${_user_defined}" == "n" ]]; then
    if [[ "${_target_app}" == "" ]]; then
      _msg=(
        "a target application needs to"
        "be specified with option '-a'"
        "if not enabling user-defined"
        "deployments with '-u' and"
        "specifying a deployments path"
        "with '-d'"
      )
      _msg_error \
        "${_msg[*]}" \
        1
    fi
    _system_deployments_path="$( \
      _default_deployments_path_get \
        "${_target_app}" \
        "system")"
    if [[ "${_deployments_path}" != "${_system_deployments_path}" ]]; then
      _msg=(
        "to set a custom deployments path"
        "you need to enable the user-defined"
        "deployments switch with '-u'"
      )
      _msg_error \
        "${_msg[*]}" \
        1
    fi
  elif [[ "${_user_defined}" == "y" ]]; then
    if [[ "${_target_app}" != "" ]]; then
      _user_deployments_path="$( \
        _fs_deployments_path_get \
          "${_target_app}" \
          "user")"
    fi
    if [[ "${_deployments_path}" != "${_user_deployments_path}" ]]; then
      _msg=(
        "using custom deployments path"
        "'${_deployments_path}'"
      )
      _msg_info \
        "${_msg[*]}"
    elif [[ "${_deployments_path}" == "${_user_deployments_path}" ]]; then
      _user_deployments_check
    fi
  fi
  _contract_address_get \
    "${_deployments_path}" \
    "${_target_network}" \
    "${_fs_version}"
  echo \
    "${_contract_address}"
}

_default_deployments_path_get() {
  local \
    _app="${1}" \
    _type="${2}" \
    _conf_dir
  if [[ "${_type}" == "system" ]]; then
    _conf_dir="$( \
      _get_lib)"
  elif [[ "${_type}" == "user" ]]; then
    _conf_dir="${HOME}/.config"
  fi
  echo \
    "${_conf_dir}/${_app}/deployments"
}

_deployments_path_auto_detect() {
  local \
    _app \
    _deployments \
    _user_defined
  _app="$( \
    _get \
      "target" \
      "app")"
  if [[ "${_app}" != "" ]]; then
    _user_defined="$( \
      _get \
        "user" \
        "defined")"
    if [[ "${_user_defined}" == "n" ]]; then
      _deployments="$( \
        _fs_deployments_path \
          "${_app}" \
          "system")"
    elif [[ "${_user_defined}" == "y" ]]; then
      _deployments="$( \
        _fs_deployments_path \
          "system")"
    fi
  fi
  _set_override \
    "deployments" \
    "dir" \
    "${_deployments}"
}

_set_overrides() {
  if [[ -v override_quiet ]]; then
    quiet="${override_quiet}"
  elif [[ -z "${quiet}" ]]; then
    quiet="y"
  fi
  if [[ -v override_color ]]; then
    color="${override_color}"
  elif [[ -z "${color}" ]]; then
    color="n"
  fi
  _set_override \
    "resolve" \
    "date" \
    "$(_get_date_human)"
  _set_override \
    "target" \
    "network" \
    "gnosis"
  _set_override \
    "network" \
    "id" \
    ""
  _set_override \
    "target" \
    "app" \
    ""
  _set_override \
    "contract" \
    "version" \
    "1.0"
  _set_override \
    "user" \
    "defined" \
    "n"
  _deployments_path_auto_detect
}

# Show help usage, with an exit status.
# $1: exit status number.
_usage() {
  local \
    _usage_text
  IFS='' \
    read \
      -r \
      -d '' \
      _usage_text << \
        ENDUSAGETEXT || true
Returns an EVM network's contract deployment address

Usage:

  $(_get "app" "name")
    [options]
    <target_contract>

  networks:
    ethereum
    gnosis

  options:
     -n <network>           EVM network name.
                            Default: $(_get "target" "network")
     -i <network_id>        EVM network id.
                            Default: $(_get "network" "id")
     -a <target_app>        Application whose target
                            contract is part of
                            Default: $(_get "target" "application")
     -V <contract_version>  Contract vesion.
                            Default: $(_get "contract" "version")
     -u                     Returns contract address for
                            user-defined file system
                            deployment instead of the
                            system one.
                            Default: $(_get "user" "defined")
     -d                     Specify contracts deployments path
                            Default: $(_get "deployments" "path")


     -h                     This message.
     -c                     Enable color output
     -v                     Enable verbose output
ENDUSAGETEXT
  _printf \
    '%s\n' \
    "${_usage_text}"
  exit \
    "${1}"
}

_display_flags() {
  local \
    _flags=(
      "${1}"
    ) \
    _flag
  for _flag \
    in "${_flags[@]}"; do
  _msg_info \
    "                             ${_flag}"
  done
}

# Shows configuration options.
_show_config() {
  _msg_info "${app_name} configuration"
  _msg_info "             Resolve date:   $(_get "resolve" "date")"
  _msg_info "           Target network:   $(_get "target" "network")"
  _msg_info "               Network ID:   $(_get "network" "id")"
  _msg_info "          Target contract:   $(_get "target" "contract")"
  _msg_info "       Target application:   $(_get "target" "app")"
  _msg_info "         Contract version:   $(_get "contract" "version")"
  _msg_info "     User-defined address:   $(_get "user" "defined")"
  _msg_info "         Deployments path:   $(_get "deployments" "path")"
}

_globals
_global_variables
_requirements
_config_user_init \
  "$(_get \
       "app" \
       "name")"
# shellcheck disable=SC2034
while \
  getopts \
    'n:i:a:V:ud:cvh?' \
    arg; do
  case \
    "${arg}" in
    n) override_target_network="${OPTARG}" ;;
    i) override_network_id="${OPTARG}" ;;
    a) override_target_app="${OPTARG}" ;;
    V) override_contract_version="${OPTARG}" ;;
    u) override_user_defined="y" ;;
    d) override_deployments_path="${OPTARG}" ;;
    c) override_color="y" ;;
    v) override_quiet="n" ;;
    h|?) _set_overrides && \
         _usage \
           0 ;;
    *)
    _msg_error \
      "Invalid argument '${arg}'" \
      0
    _usage \
      1
    ;;
  esac
done
shift \
  $(( \
    OPTIND - 1 \
  ))
if (( $# < 1 )); then
  _msg=(
    "a target contract"
    "must be specified"
  )
  _msg_error \
    "${_msg[*]}" \
    0
  _usage \
    1
fi
_set \
  "target" \
  "contract" \
  "${1}"
_set_overrides
_config_user_init \
  "$( \
    _get \
      "app" \
      "name")"
_show_config
app_opts=(
  "$( \
    _get \
      "target" \
      "network")"
  "$( \
    _get \
      "network" \
      "id")"
  "$( \
    _get \
      "target" \
      "app")"
  "$( \
    _get \
      "target" \
      "contract")"
  "$( \
    _get \
      "contract" \
      "version")"
  "$( \
    _get \
      "user" \
      "defined")"
  "$( \
    _get \
      "deployments" \
      "path")"
)
_evm_contract_deployment_address \
  "${app_opts[@]}"

# vim:set sw=2 sts=-1 et:
