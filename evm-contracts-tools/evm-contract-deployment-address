#!/usr/bin/env bash
#
# SPDX-License-Identifier: AGPL-3.0-or-later

_bin="$( \
  dirname \
    "$( \
      command \
        -v \
	  "env")")"
_lib="${_bin}/../lib"
source \
  "${_lib}/libcrash-bash/crash-bash"

# shellcheck disable=SC2034
_global_variables() {
  resolve_date=""
  target_network=""
  network_id=""
  target_app=""
  target_contract=""
  contract_version=""
  user_defined=""
  deployments_dir=""
  color=""
  quiet=""
}

_requirements() {
  _check_cmd \
    "evm-contract-deployments-dir" \
    "evm-contract-tools"
  _check_cmd \
    "evm-chains-info"
}

_contract_address_get() {
  local \
    _deployments="${1}" \
    _contract="${2}" \
    _network="${3}" \
    _network_id="${4}" \
    _version="${5}" \
    _config \
    _address \
    _found
  _found="false"
  for _net \
    in "${_network}" \
       "${_network_id}"; do
    _config="${_deployments}/${_contract}/${_net}/config.sh"
    if [[ -e "${_config}" ]]; then
      _found="true"
      break
    fi
  done
  if [[ "${_found}" == "false" ]]; then
    _msg=(
      "no network '${_network}' deployment"
      "configuration for '${_contract}'"
      "found at path '${_deployments}'."
    )
    _msg_error \
      "${_msg[*]}" \
      1
  fi
  source \
    "${_config}"
  _contract_address="${contract_address["${_version}"]}"
  if [[ "${_contract_address}" == "" ]]; then
    _msg=(
      "no '${_contract}' version '${_version}' contract"
      "deployment specified for network '${_network}'"
      "at directory path '${_deployments}'"
    )
    _msg_error \
      "${_msg[*]}" \
      1
  fi
}

_network_check() {
  local \
    _deployments="${1}" \
    _contract="${2}" \
    _target_network="${3}" \
    _target_network_id="${4}" \
    _msg=() \
    _networks=()
  _networks+=( $( \
    evm-contract-deployment-networks \
      -A \
      "${_deployments}/${_contract}")
  )
  if [[ "${_target_network_id}" != "" ]]; then
    echo "${_networks[@]}"
    echo "${_target_network_id}"
    if [[ " ${_networks[*]} " != *" ${_target_network_id} "* ]]; then
      _msg=(
        "the contract does not result deployed on"
        "'${_target_network_id}' network"
      )
      _msg_error \
        "${_msg[*]}" \
        1
    fi
  elif [[ "${_target_network}" != "" ]]; then
    if [[ " ${_networks[*]} " != *" ${_target_network} "* ]]; then
      _msg=(
        "the contract does not result deployed on"
        "'${_target_network}' network"
      )
      _msg_error \
        "${_msg[*]}" \
        1
    fi
  else
    _msg=(
      "Provide one between a target network"
      "name or ID."
    )
    _msg_error \
      "${_msg[*]}" \
      1
  fi
  if [[ "${_target_network_id}" == "" ]]; then
    evm-chains-info \
      -i \
        'name' \
      -o \
        'id' \
      "${_target_network}"
  elif [[ "${_target_network}" == "" ]]; then
    evm-chains-info \
      -i \
        'id' \
      -o \
        'name' \
      "${_target_network_id}"
  fi
  if [[ "${_target_network_id}" != "" ]]; then
    if [[ "${_target_network_id}" != "${_network_id}" ]]; then
    _msg=(
      "requested target network ID"
      "'${_target_network_id}' does"
      "not correspond to '${_target_network}'"
      "known ID '${_network_id}'"
    )
    _msg_error \
      "${_msg[*]}" \
      1
    fi
  fi
}

_user_deployments_init() {
  local \
    _app="${1}" \
    _evm_contract_deployments_dir_opts=()
  mkdir \
    -p \
    "${_deployments_dir}"
  chmod \
    700 \
    "${_deployments_dir}"
  cp \
    -r \
    "$(evm-contract-deployments-dir \
         "${_app}")/"* \
    "${_deployments_dir}"
}

_user_deployments_check() {
  local \
    _app="${1}"
  if [[ ! -e "${_deployments_dir}" ]]; then
    _user_deployments_init \
      "${_app}"
  fi
}

_evm_contract_deployment_address() {
  local \
    _target_network="${1}" \
    _target_network_id="${2}" \
    _target_app="${3}" \
    _target_contract="${4}" \
    _contract_version="${5}" \
    _user_defined="${6}" \
    _deployments_dir="${7}" \
    _system_deployments_dir \
    _user_deployments_dir \
    _network_id \
    _contract_address \
    _args=() \
    _msg=()
  shift \
    7
  _args+=(
    "$@"
  )
  if [[ "${_user_defined}" == "n" ]]; then
    if [[ "${_target_app}" == "" ]]; then
      _msg=(
        "a target application needs to"
        "be specified with option '-a'"
        "if not enabling user-defined"
        "deployments with '-u' and"
        "specifying a deployments directory"
        "path with '-d'"
      )
      _msg_error \
        "${_msg[*]}" \
        1
    fi
    _system_deployments_dir="$( \
      evm-contract-deployments-dir \
        "${_target_app}")"
    if [[ "${_deployments_dir}" != "${_system_deployments_dir}" ]]; then
      _msg=(
        "to set a custom deployments directory path"
        "you need to enable the user-defined"
        "deployments switch with '-u'"
      )
      _msg_error \
        "${_msg[*]}" \
        1
    fi
  elif [[ "${_user_defined}" == "y" ]]; then
    _user_deployments_dir=""
    if [[ "${_target_app}" != "" ]]; then
      _user_deployments_dir="$( \
        evm-contract-deployments-dir \
          -u \
          "${_target_app}")"
    fi
    if [[ "${_deployments_dir}" != "${_user_deployments_dir}" ]]; then
      _msg=(
        "using custom deployments directory"
        "path '${_deployments_dir}'"
      )
      _msg_info \
        "${_msg[*]}"
    elif [[ "${_deployments_dir}" == "${_user_deployments_dir}" ]]; then
      _user_deployments_check
    fi
  fi
  _network_check \
    "${_deployments_dir}" \
    "${_target_contract}" \
    "${_target_network}" \
    "${_target_network_id}"
  _contract_address_get \
    "${_deployments_dir}" \
    "${_target_contract}" \
    "${_target_network}" \
    "${_target_network_id}" \
    "${_contract_version}"
  echo \
    "${_contract_address}"
}

_deployments_dir_auto_detect() {
  local \
    _app \
    _deployments \
    _user_defined
  _deployments=""
  _app="$( \
    _get \
      "target" \
      "app")"
  if [[ "${_app}" != "" ]]; then
    _user_defined="$( \
      _get \
        "user" \
        "defined")"
    if [[ "${_user_defined}" == "y" ]]; then
      _evm_contracts_deployment_dir_opts+=(
        -u
      )
    fi
    _deployments="$( \
      evm-contract-deployments-dir \
        "${_evm_contracts_deployments_dir_opts[@]}" \
        "${_app}")"
  fi
  _set_override \
    "deployments" \
    "dir" \
    "${_deployments}"
}

_contract_version_auto_detect() {
  local \
    _config \
    _contract \
    _deployments \
    _network \
    _version \
    _net \
    _found \
    _msg=()
  _contract="${target_contract}"
  _version=""
  _found="false"
  if [[ "${_contract}" != "" ]]; then
    _deployments="${deployments_dir}"
    _network="${target_network}"
    _network_id="${network_id}"
    for _net \
      in "${_network}" \
         "${_network_id}"; do
      _config="${_deployments}/${_contract}/${_net}/config.sh"
      if [[ -e "${_config}" ]]; then
        _found="true"
        break
      fi
    done
    if [[ "${_found}" == "false" ]]; then
      _msg=(
        "No deployment configuration"
        "file found for network"
        "'${_network}' with ID"
        "'${_network_id}'"
      )
      _msg_error \
        "${_msg[*]}" \
        1
    fi
    _version="$( \
      evm-contract-deployment-versions \
        -H \
        "${_config}")"
  fi
  _set_override \
    "contract" \
    "version" \
    "${_version}"
}

_set_overrides() {
  if [[ -v override_quiet ]]; then
    quiet="${override_quiet}"
  elif [[ -z "${quiet}" ]]; then
    quiet="y"
  fi
  if [[ -v override_color ]]; then
    color="${override_color}"
  elif [[ -z "${color}" ]]; then
    color="n"
  fi
  _set_override \
    "resolve" \
    "date" \
    "$(_get_date_human)"
  _set_override \
    "target" \
    "network" \
    ""
  _set_override \
    "network" \
    "id" \
    ""
  _set_override \
    "target" \
    "app" \
    ""
  _set_override \
    "user" \
    "defined" \
    "n"
  _deployments_dir_auto_detect
  _contract_version_auto_detect
}

# Show help usage, with an exit status.
# $1: exit status number.
_usage() {
  local \
    _usage_text
  IFS='' \
    read \
      -r \
      -d '' \
      _usage_text << \
        ENDUSAGETEXT || true
Returns an EVM network's contract deployment address

Usage:

  $(_get "app" "name")
    [options]
    <target_contract>

  networks:
    ethereum
    gnosis

  options:
     -n <network>           EVM network name.
                            Default: ${target_network}
     -i <network_id>        EVM network id.
                            Default: ${network_id}
     -a <target_app>        Application whose target
                            contract is part of.
                            Default: ${target_app}
     -V <contract_version>  Contract version.
                            Default: ${contract_version}
     -u                     Returns contract address for
                            user-defined file system
                            deployment instead of the
                            system one.
                            Default: ${user_defined}
     -d                     Specify contracts deployments
                            directory path.
                            Default: ${deployments_dir}

     -h                     This message.
     -c                     Enable color output
     -v                     Enable verbose output
ENDUSAGETEXT
  _printf \
    '%s\n' \
    "${_usage_text}"
  exit \
    "${1}"
}

_display_flags() {
  local \
    _flags=(
      "${1}"
    ) \
    _flag
  for _flag \
    in "${_flags[@]}"; do
  _msg_info \
    "                             ${_flag}"
  done
}

# Shows configuration options.
_show_config() {
  _msg_info "${app_name} configuration"
  _msg_info "             Resolve date:   ${resolve_date}"
  _msg_info "           Target network:   ${target_network}"
  _msg_info "               Network ID:   ${network_id}"
  _msg_info "          Target contract:   ${target_contract}"
  _msg_info "       Target application:   ${target_app}"
  _msg_info "         Contract version:   ${contract_version}"
  _msg_info "     User-defined address:   ${user_defined}"
  _msg_info "         Deployments path:   ${deployments_dir}"
}

_globals
_global_variables
_requirements
_config_user_init \
  "$(_get \
       "app" \
       "name")"
# shellcheck disable=SC2034
while \
  getopts \
    'n:i:a:V:ud:cvh?' \
    arg; do
  case \
    "${arg}" in
    n) override_target_network="${OPTARG}" ;;
    i) override_network_id="${OPTARG}" ;;
    a) override_target_app="${OPTARG}" ;;
    V) override_contract_version="${OPTARG}" ;;
    u) override_user_defined="y" ;;
    d) override_deployments_dir="${OPTARG}" ;;
    c) override_color="y" ;;
    v) override_quiet="n" ;;
    h|?) _set_overrides && \
         _usage \
           0 ;;
    *) _set_overrides && \
       _msg_error \
         "Invalid argument '${arg}'" \
         0
       _usage \
         1 ;;
  esac
done
shift \
  $(( \
    OPTIND - 1 \
  ))
if (( $# < 1 )); then
  _msg=(
    "a target contract"
    "must be specified"
  )
  _set_overrides
  _msg_error \
    "${_msg[*]}" \
    0
  _usage \
    1
fi
_set \
  "target" \
  "contract" \
  "${1}"
_set_overrides
_show_config
app_opts=(
  "${target_network}"
  "${network_id}"
  "${target_app}"
  "${target_contract}"
  "${contract_version}"
  "${user_defined}"
  "${deployments_dir}"
)
_evm_contract_deployment_address \
  "${app_opts[@]}"

# vim:set sw=2 sts=-1 et:
