#!/usr/bin/env bash
#
# SPDX-License-Identifier: AGPL-3.0-or-later

_bin="$( \
  dirname \
    "$( \
      command \
        -v \
	  "env")")"
_lib="${_bin}/../lib"
source \
  "${_lib}/libcrash-bash/crash-bash"

# shellcheck disable=SC2034
_global_variables() {
  resolve_date=""
  target_app=""
  user_level=""
  color=""
  quiet=""
}

_requirements() {
  true
}

_default_deployments_dir_get() {
  local \
    _app="${1}" \
    _type="${2}" \
    _conf_dir
  if [[ "${_type}" == "system" ]]; then
    _conf_dir="$( \
      _get_lib)"
  elif [[ "${_type}" == "user" ]]; then
    _conf_dir="${HOME}/.config"
  fi
  echo \
    "${_conf_dir}/${_app}/deployments"
}

_evm_contract_deployments_dir() {
  local \
    _app="${1}" \
    _user_level="${2}" \
    _deployments \
  _deployments=""
  _app="$( \
    _get \
      "target" \
      "app")"
  if [[ "${_app}" != "" ]]; then
    _user_level="$( \
      _get \
        "user" \
        "level")"
    if [[ "${_user_level}" == "n" ]]; then
      _deployments="$( \
        _default_deployments_dir_get \
          "${_app}" \
          "system")"
    elif [[ "${_user_level}" == "y" ]]; then
      _deployments="$( \
        _default_deployments_dir_get \
          "${_app}" \
          "user")"
    fi
  fi
  echo \
    "${_deployments}"
}

_set_overrides() {
  if [[ -v override_quiet ]]; then
    quiet="${override_quiet}"
  elif [[ -z "${quiet}" ]]; then
    quiet="y"
  fi
  if [[ -v override_color ]]; then
    color="${override_color}"
  elif [[ -z "${color}" ]]; then
    color="n"
  fi
  _set_override \
    "resolve" \
    "date" \
    "$(_get_date_human)"
  _set_override \
    "user" \
    "level" \
    "n"
}

# Show help usage, with an exit status.
# $1: exit status number.
_usage() {
  local \
    _usage_text
  IFS='' \
    read \
      -r \
      -d '' \
      _usage_text << \
        ENDUSAGETEXT || true
Returns default deployments directory for an application

Usage:

  $(_get "app" "name")
    [options]
    <target_app>

  options:
     -u                     Returns user-level location for
                            an application deployments.
                            Default: $(_get "user" "level")

     -h                     This message.
     -c                     Enable color output
     -v                     Enable verbose output
ENDUSAGETEXT
  _printf \
    '%s\n' \
    "${_usage_text}"
  exit \
    "${1}"
}

_display_flags() {
  local \
    _flags=(
      "${1}"
    ) \
    _flag
  for _flag \
    in "${_flags[@]}"; do
  _msg_info \
    "                             ${_flag}"
  done
}

# Shows configuration options.
_show_config() {
  _msg_info "${app_name} configuration"
  _msg_info "             Resolve date:   $(_get "resolve" "date")"
  _msg_info "       Target application:   $(_get "target" "app")"
  _msg_info "     User-level directory:   $(_get "user" "level")"
}

_globals
_global_variables
_requirements
_config_user_init \
  "$(_get \
       "app" \
       "name")"
# shellcheck disable=SC2034
while \
  getopts \
    'ucvh?' \
    arg; do
  case \
    "${arg}" in
    u) override_user_level="y" ;;
    c) override_color="y" ;;
    v) override_quiet="n" ;;
    h|?) _set_overrides && \
         _usage \
           0 ;;
    *) _set_overrides && \
       _msg_error \
         "Invalid argument '${arg}'" \
         0
       _usage \
         1 ;;
  esac
done
shift \
  $(( \
    OPTIND - 1 \
  ))
if (( $# < 1 )); then
  _msg=(
    "a target application"
    "must be specified"
  )
  _set_overrides
  _msg_error \
    "${_msg[*]}" \
    0
  _usage \
    1
fi
_set \
  "target" \
  "app" \
  "${1}"
_set_overrides
_show_config
app_opts=(
  "$( \
    _get \
      "target" \
      "app")"
  "$( \
    _get \
      "user" \
      "level")"
)
_evm_contract_deployments_dir \
  "${app_opts[@]}"

# vim:set sw=2 sts=-1 et:
